<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BeautifulSoup使用简介</title>
    <link href="/blog/3873777087.html"/>
    <url>/blog/3873777087.html</url>
    
    <content type="html"><![CDATA[<h1 id="Beautiful-Soup-安装"><a href="#Beautiful-Soup-安装" class="headerlink" title="Beautiful Soup 安装"></a>Beautiful Soup 安装</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">easy_install</span> beautifulsoup4<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> beautifulsoup4<br></code></pre></td></tr></table></figure><h1 id="创建-Beautiful-Soup-对象"><a href="#创建-Beautiful-Soup-对象" class="headerlink" title="创建 Beautiful Soup 对象"></a>创建 Beautiful Soup 对象</h1><p>首先必须要导入 bs4 库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="hljs-string">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>创建 beautifulsoup 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(html)<br></code></pre></td></tr></table></figure><p>另外，我们还可以用本地 HTML 文件来创建对象，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>))<br></code></pre></td></tr></table></figure><p>上面这句代码便是将本地 index.html 文件打开，用它来创建 soup 对象 下面我们来打印一下 soup 对象的内容，格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> soup.prettify()<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>   The Dormouse&#x27;s story<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dromouse&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>    The Dormouse&#x27;s story<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><br>   Once upon a time there were three little sisters; and their names were<br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/elsie&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Elsie --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   ,<br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/lacie&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link2&quot;</span>&gt;</span><br>    Lacie<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   and<br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/tillie&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link3&quot;</span>&gt;</span><br>    Tillie<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   ;<br>and they lived at the bottom of a well.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><br>   ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>在快速使用中我们添加如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.title)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(soup.title)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.head)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p)</span></span><br></code></pre></td></tr></table></figure><p>通过这种 soup.标签名 我们就可以获得这个标签的内容<br>这里有个问题需要注意，通过这种方式获取标签，如果文档中有多个这样的标签，返回的结果是第一个标签的内容，如上面我们通过 soup.p 获取 p 标签，而文档中有多个 p 标签，但是只返回了第一个 p 标签内容</p><h3 id="获取名称"><a href="#获取名称" class="headerlink" title="获取名称"></a>获取名称</h3><p>当我们通过 soup.title.name 的时候就可以获得该 title 标签的名称，即 title</p><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p.attrs[<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p[<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br></code></pre></td></tr></table></figure><p>上面两种方式都可以获取 p 标签的 name 属性值</p><h3 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p.string)</span></span><br></code></pre></td></tr></table></figure><p>结果就可以获取第一个 p 标签的内容：<br>The Dormouse’s story</p><h3 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><p>我们直接可以通过下面嵌套的方式获取</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">print</span>(soup.head.<span class="hljs-built_in">title</span>.<span class="hljs-built_in">string</span>)<br></code></pre></td></tr></table></figure><p>子节点和子孙节点<br>contents 的使用<br>通过下面例子演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">html = &quot;&quot;&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><br>            Once upon a time there were three little sisters; and their names were<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/elsie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Elsie<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/lacie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link2&quot;</span>&gt;</span>Lacie<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            and<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/tillie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link3&quot;</span>&gt;</span>Tillie<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            and they lived at the bottom of a well.<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&quot;&quot;&quot;<br><br>from bs4 import BeautifulSoup<br><br>soup = BeautifulSoup(html,&#x27;lxml&#x27;)<br>print(soup.p.contents)<br></code></pre></td></tr></table></figure><p>结果是将 p 标签下的所有子标签存入到了一个列表中</p><p>列表中会存入如下元素</p><h3 id="children-的使用"><a href="#children-的使用" class="headerlink" title="children 的使用"></a>children 的使用</h3><p>通过下面的方式也可以获取 p 标签下的所有子节点内容和通过 contents 获取的结果是一样的，但是不同的地方是 soup.p.children 是一个迭代对象，而不是列表，只能通过循环的方式获取素有的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(soup.p.children)<br><span class="hljs-keyword">for</span> i,child <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(soup.p.children):<br><span class="hljs-built_in">print</span>(i,child)<br></code></pre></td></tr></table></figure><p>通过 contents 以及 children 都是获取子节点，如果想要获取子孙节点可以通过 descendants<br>print(soup.descendants)同时这种获取的结果也是一个迭代器</p><h3 id="父节点和祖先节点"><a href="#父节点和祖先节点" class="headerlink" title="父节点和祖先节点"></a>父节点和祖先节点</h3><p>通过 soup.a.parent 就可以获取父节点的信息</p><p>通过 list(enumerate(soup.a.parents))可以获取祖先节点，这个方法返回的结果是一个列表，会分别将 a 标签的父节点的信息存放到列表中，以及父节点的父节点也放到列表中，并且最后还会讲整个文档放到列表中，所有列表的最后一个元素以及倒数第二个元素都是存的整个文档的信息</p><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><p>soup.a.next_siblings 获取后面的兄弟节点<br>soup.a.previous_siblings 获取前面的兄弟节点<br>soup.a.next_sibling 获取下一个兄弟标签<br>souo.a.previous_sinbling 获取上一个兄弟标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">get_text()<br></code></pre></td></tr></table></figure><p>如果只想得到 tag 中包含的文本内容,那么可以调用 get_text() 方法,这个方法获取到 tag 中包含的所有文版内容包括子孙 tag 中的内容,并将结果作为 Unicode 字符串返回</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">markup = <span class="hljs-string">&#x27;&lt;a href=&quot;http://example.com/&quot;&gt;\nI linked to &lt;i&gt;example.com&lt;/i&gt;\n&lt;/a&gt;&#x27;</span><br>soup = BeautifulSoup(markup)<br><br>soup.get_text()<br><span class="hljs-string">u&#x27;\nI linked to example.com\n&#x27;</span><br>soup.i.get_text()<br><span class="hljs-string">u&#x27;example.com&#x27;</span><br></code></pre></td></tr></table></figure><p>可以通过参数指定 tag 的文本内容的分隔符:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># soup.get_text(&quot;|&quot;)</span><br><span class="hljs-string">u&#x27;\nI linked to |example.com|\n&#x27;</span><br></code></pre></td></tr></table></figure><p>还可以去除获得文本内容的前后空白:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># soup.get_text(&quot;|&quot;, strip=True)</span><br><span class="hljs-string">u&#x27;I linked to|example.com&#x27;</span><br></code></pre></td></tr></table></figure><p>或者使用 .stripped_strings 生成器,获得文本列表后手动处理列表:</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">[<span class="hljs-literal">text</span> <span class="hljs-keyword">for</span> <span class="hljs-literal">text</span> <span class="hljs-keyword">in</span> soup.stripped_strings]<br># [u<span class="hljs-symbol">&#x27;I</span> linked <span class="hljs-keyword">to</span>&#x27;, u<span class="hljs-symbol">&#x27;example</span>.com&#x27;]<br></code></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title=".string"></a>.string</h3><p>如果 tag 只有一个 NavigableString 类型子节点,那么这个 tag 可以使用 .string 得到子节点:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sml">title_tag.<span class="hljs-built_in">string</span><br># u&#x27;The <span class="hljs-type">Dormouse&#x27;s</span> story&#x27;<br></code></pre></td></tr></table></figure><p>如果一个 tag 仅有一个子节点,那么这个 tag 也可以使用 .string 方法,输出结果与当前唯一子节点的 .string 结果相同:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">head_tag.contents<br># [&lt;title&gt;The Dormous<span class="hljs-string">e&#x27;s story&lt;/title&gt;]</span><br><span class="hljs-string">head_tag.string</span><br><span class="hljs-string"># u&#x27;</span>The Dormous<span class="hljs-string">e&#x27;s story&#x27;</span><br></code></pre></td></tr></table></figure><p>如果 tag 包含了多个子节点,tag 就无法确定 .string 方法应该调用哪个子节点的内容, .string 的输出结果是 None :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(soup.html.<span class="hljs-keyword">string</span>)<br><span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常用命令</title>
    <link href="/blog/1608380678.html"/>
    <url>/blog/1608380678.html</url>
    
    <content type="html"><![CDATA[<h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><h2 id="1、第一次初始化"><a href="#1、第一次初始化" class="headerlink" title="1、第一次初始化"></a>1、第一次初始化</h2><blockquote><p>git init<br>git add .<br>git commit -m ‘first commit’<br>git remote add origin <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>:帐号名&#x2F;仓库名.git<br>git pull origin master<br>git push origin master # -f 强推<br>git clone <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a>:git 帐号名&#x2F;仓库名.git</p></blockquote><h2 id="2、工作基本操作"><a href="#2、工作基本操作" class="headerlink" title="2、工作基本操作"></a>2、工作基本操作</h2><blockquote><p>git checkout master 切到主分支<br>git fetch origin 获取最新变更<br>git checkout -b dev origin&#x2F;master 基于主分支创建 dev 分支<br>git add . 添加到缓存<br>git commit -m ‘xxx’ 提交到本地仓库<br>git fetch origin 获取最新变更</p></blockquote><h2 id="3、初始化仓库"><a href="#3、初始化仓库" class="headerlink" title="3、初始化仓库"></a>3、初始化仓库</h2><blockquote><p>git init</p></blockquote><h2 id="4、查看仓库当前状态"><a href="#4、查看仓库当前状态" class="headerlink" title="4、查看仓库当前状态"></a>4、查看仓库当前状态</h2><blockquote><p>git status</p></blockquote><h2 id="5、文件相关操作"><a href="#5、文件相关操作" class="headerlink" title="5、文件相关操作"></a>5、文件相关操作</h2><blockquote><p>将文件添加到仓库：</p><p>git add 文件名 将工作区的某个文件添加到暂存区<br>git add . 将当前工作区的所有文件都加入暂存区<br>git add -u 添加所有被 tracked 文件中被修改或删除的文件信息到暂存区，不处理 untracked 的文件<br>git add -A 添加所有被 tracked 文件中被修改或删除的文件信息到暂存区，包括 untracked 的文件<br>git add -i 进入交互界面模式，按需添加文件到缓存区</p></blockquote><blockquote><p>将暂存区文件提交到本地仓库：</p><p>git commit -m “提交说明” 将暂存区内容提交到本地仓库<br>git commit -a -m “提交说明” 跳过缓存区操作，直接把工作区内容提交到本地仓库</p></blockquote><blockquote><p>比较文件异同</p><p>git diff 工作区与暂存区的差异<br>git diff 分支名 工作区与某分支的差异，远程分支这样写：remotes&#x2F;origin&#x2F;分支名<br>git diff HEAD 工作区与 HEAD 指针指向的内容差异<br>git diff 提交 id 文件路径 工作区某文件当前版本与历史版本的差异<br>git diff –stage 工作区文件与上次提交的差异(1.6 版本前用 –cached)<br>git diff 版本 TAG 查看从某个版本后都改动内容<br>git diff 分支 A 分支 B 比较从分支 A 和分支 B 的差异(也支持比较两个 TAG)<br>git diff 分支 A…分支 B 比较两分支在分开后各自的改动<br>另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数</p></blockquote><h2 id="6、查看历史记录"><a href="#6、查看历史记录" class="headerlink" title="6、查看历史记录"></a>6、查看历史记录</h2><blockquote><p>git log 查看所有 commit 记录(SHA-A 校验和，作者名称，邮箱，提交时间，提交说明)<br>git log -p -次数 查看最近多少次的提交记录<br>git log –stat 简略显示每次提交的内容更改<br>git log –name-only 仅显示已修改的文件清单<br>git log –name-status 显示新增，修改，删除的文件清单<br>git log –oneline 让提交记录以精简的一行输出<br>git log –graph –all –online 图形展示分支的合并历史<br>git log –author&#x3D;作者 查询作者的提交记录(和 grep 同时使用要加一个–all–match 参数)<br>git log –grep&#x3D;过滤信息 列出提交信息中包含过滤信息的提交记录<br>git log -S 查询内容 和–grep 类似，S 和查询内容间没有空格<br>git log fileName 查看某文件的修改记录</p></blockquote><h2 id="7、代码回滚"><a href="#7、代码回滚" class="headerlink" title="7、代码回滚"></a>7、代码回滚</h2><blockquote><p>git reset HEAD^ 恢复成上次提交的版本<br>git reset HEAD^^ 恢复成上上次提交的版本，就是多个^，以此类推或用~次数<br>git reflog<br>git reset –hard 版本号<br>–soft：只是改变 HEAD 指针指向，缓存区和工作区不变；<br>–mixed：修改 HEAD 指针指向，暂存区内容丢失，工作区不变；<br>–hard：修改 HEAD 指针指向，暂存区内容丢失，工作区恢复以前状态；</p></blockquote><h2 id="8、版本库相关操作"><a href="#8、版本库相关操作" class="headerlink" title="8、版本库相关操作"></a>8、版本库相关操作</h2><blockquote><p>删除版本库文件：git rm 文件名<br>版本库里的版本替换工作区的版本：git checkout — test.txt</p></blockquote><h2 id="9、远程仓库相关操作"><a href="#9、远程仓库相关操作" class="headerlink" title="9、远程仓库相关操作"></a>9、远程仓库相关操作</h2><blockquote><p>同步远程仓库：git push -u origin master</p><p>本地仓库内容推送到远程仓库：git remote add origin <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a>:帐号名&#x2F;仓库名.git</p><p>从远程仓库克隆项目到本地：git clone <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:git 帐号名&#x2F;仓库名.git</p><p>查看远程库信息：git remote</p><p>拉取远程分支到本地仓库：</p><p>git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支<br>git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需 checkout<br>git branch –set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接<br>同步远程仓库更新：：git fetch origin master</p></blockquote><h2 id="10、分支相关操作"><a href="#10、分支相关操作" class="headerlink" title="10、分支相关操作"></a>10、分支相关操作</h2><blockquote><p>创建分支：git checkout -b dev -b 表示创建并切换分支<br>上面一条命令相当于一面的二条：<br>git branch dev 创建分支<br>git checkout dev 切换分支</p><p>查看分支：git branch</p><p>合并分支：</p><p>git merge dev #用于合并指定分支到当前分支<br>git merge –no-ff -m “merge with no-ff” dev #加上–no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并<br>删除分支：git branch -d dev</p><p>查看分支合并图：git log –graph –pretty&#x3D;oneline –abbrev-commit</p></blockquote><h2 id="11、git-相关配置"><a href="#11、git-相关配置" class="headerlink" title="11、git 相关配置"></a>11、git 相关配置</h2><blockquote><p>安装完 Git 后第一件要做的事，设置用户信息(global 可换成 local 在单独项目生效)：</p><p>git config –global user.name “用户名” # 设置用户名<br>git config –global user.email “用户邮箱” #设置邮箱<br>git config –global user.name # 查看用户名是否配置成功<br>git config –global user.email # 查看邮箱是否配置</p></blockquote><h2 id="12、其他查看配置相关"><a href="#12、其他查看配置相关" class="headerlink" title="12、其他查看配置相关"></a>12、其他查看配置相关</h2><blockquote><p>git config –global –list # 查看全局设置相关参数列表<br>git config –local –list # 查看本地设置相关参数列表<br>git config –system –list # 查看系统配置参数列表<br>git config –list # 查看所有 Git 的配置(全局+本地+系统)<br>git config –global color.ui true &#x2F;&#x2F;显示 git 相关颜色</p></blockquote><h2 id="13、撤消某次提交"><a href="#13、撤消某次提交" class="headerlink" title="13、撤消某次提交"></a>13、撤消某次提交</h2><blockquote><p>git revert HEAD # 撤销最近的一个提交<br>git revert 版本号 # 撤销某次 commit</p></blockquote><h2 id="14、标签"><a href="#14、标签" class="headerlink" title="14、标签"></a>14、标签</h2><blockquote><p>git tag 标签 &#x2F;&#x2F;打标签命令，默认为 HEAD<br>git tag &#x2F;&#x2F;显示所有标签<br>git tag 标签 版本号 &#x2F;&#x2F;给某个 commit 版本添加标签<br>git show 标签 &#x2F;&#x2F;显示某个标签的详细信息</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript基础</title>
    <link href="/blog/2796872113.html"/>
    <url>/blog/2796872113.html</url>
    
    <content type="html"><![CDATA[<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><blockquote><p>鼠标单击事件 ( onclick )<br>鼠标经过事件（onmouseover）<br>鼠标移开事件（onmouseout）<br>光标聚焦事件（onfocus）<br>失焦事件（onblur）<br>内容选中事件（onselect）<br>文本框内容改变事件（onchange）<br>加载事件（onload）<br>卸载事件（onunload）<br>……</p></blockquote><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date 日期对象"></a>Date 日期对象</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> Udate=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">date = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;&amp;nbsp;                                <span class="hljs-comment">//直接创建</span><br>date = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">val</span>)</span>;                              <span class="hljs-comment">//指定日期创建</span><br>date = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(Y,<span class="hljs-params">m</span>,<span class="hljs-params">d</span>[,<span class="hljs-params">h</span>[,<span class="hljs-params">min</span>[,<span class="hljs-params">second</span>[,<span class="hljs-params">ms</span>]]]])</span>     <span class="hljs-comment">//传入具体时间创建</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> d = new Date(<span class="hljs-number">2012</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);  //<span class="hljs-number">2012</span>年<span class="hljs-number">10</span>月<span class="hljs-number">1</span>日<br><span class="hljs-attribute">var</span> d = new Date(&#x27;Oct <span class="hljs-number">1</span>, <span class="hljs-number">2012</span>&#x27;); //<span class="hljs-number">2012</span>年<span class="hljs-number">10</span>月<span class="hljs-number">1</span>日<br></code></pre></td></tr></table></figure><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs stylus">方法<br><br>描述<br><br><span class="hljs-function"><span class="hljs-title">Date</span><span class="hljs-params">()</span></span><br><br>返回当日的日期和时间。<br><br><span class="hljs-function"><span class="hljs-title">getDate</span><span class="hljs-params">()</span></span><br><br>从 Date 对象返回一个月中的某一天 (<span class="hljs-number">1</span> ~ <span class="hljs-number">31</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getDay</span><span class="hljs-params">()</span></span><br><br>从 Date 对象返回一周中的某一天 (<span class="hljs-number">0</span> ~ <span class="hljs-number">6</span>)。注：<span class="hljs-number">0</span>-<span class="hljs-number">6</span> 分别表示星期天 - 星期六。<br><br><span class="hljs-function"><span class="hljs-title">getMonth</span><span class="hljs-params">()</span></span><br><br>从 Date 对象返回月份 (<span class="hljs-number">0</span> ~ <span class="hljs-number">11</span>)。注：<span class="hljs-number">0</span>-<span class="hljs-number">11</span> 分别表示 <span class="hljs-number">1</span>-<span class="hljs-number">12</span> 月份，其值总是比实际月份小 <span class="hljs-number">1</span>。<br><br><span class="hljs-function"><span class="hljs-title">getFullYear</span><span class="hljs-params">()</span></span><br><br>从 Date 对象以四位数字返回年份。<br><br><span class="hljs-function"><span class="hljs-title">getYear</span><span class="hljs-params">()</span></span><br><br>请使用 getFullYear () 方法代替。<br><br><span class="hljs-function"><span class="hljs-title">getHours</span><span class="hljs-params">()</span></span><br><br>返回 Date 对象的小时 (<span class="hljs-number">0</span> ~ <span class="hljs-number">23</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getMinutes</span><span class="hljs-params">()</span></span><br><br>返回 Date 对象的分钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getSeconds</span><span class="hljs-params">()</span></span><br><br>返回 Date 对象的秒数 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getMilliseconds</span><span class="hljs-params">()</span></span><br><br>返回 Date 对象的毫秒 (<span class="hljs-number">0</span> ~ <span class="hljs-number">999</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getTime</span><span class="hljs-params">()</span></span><br><br>返回 <span class="hljs-number">1970</span> 年 <span class="hljs-number">1</span> 月 <span class="hljs-number">1</span> 日至今的毫秒数。<br><br><span class="hljs-function"><span class="hljs-title">getTimezoneOffset</span><span class="hljs-params">()</span></span><br><br>返回本地时间与格林威治标准时间 (GMT) 的分钟差。<br><br><span class="hljs-function"><span class="hljs-title">getUTCDate</span><span class="hljs-params">()</span></span><br><br>根据世界时从 Date 对象返回月中的一天 (<span class="hljs-number">1</span> ~ <span class="hljs-number">31</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getUTCDay</span><span class="hljs-params">()</span></span><br><br>根据世界时从 Date 对象返回周中的一天 (<span class="hljs-number">0</span> ~ <span class="hljs-number">6</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getUTCMonth</span><span class="hljs-params">()</span></span><br><br>根据世界时从 Date 对象返回月份 (<span class="hljs-number">0</span> ~ <span class="hljs-number">11</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getUTCFullYear</span><span class="hljs-params">()</span></span><br><br>根据世界时从 Date 对象返回四位数的年份。<br><br><span class="hljs-function"><span class="hljs-title">getUTCHours</span><span class="hljs-params">()</span></span><br><br>根据世界时返回 Date 对象的小时 (<span class="hljs-number">0</span> ~ <span class="hljs-number">23</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getUTCMinutes</span><span class="hljs-params">()</span></span><br><br>根据世界时返回 Date 对象的分钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getUTCSeconds</span><span class="hljs-params">()</span></span><br><br>根据世界时返回 Date 对象的秒钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">getUTCMilliseconds</span><span class="hljs-params">()</span></span><br><br>根据世界时返回 Date 对象的毫秒 (<span class="hljs-number">0</span> ~ <span class="hljs-number">999</span>)。<br><br><span class="hljs-function"><span class="hljs-title">parse</span><span class="hljs-params">()</span></span><br><br>返回 <span class="hljs-number">1970</span> 年 <span class="hljs-number">1</span> 月 <span class="hljs-number">1</span> 日午夜到指定日期（字符串）的毫秒数。<br><br><span class="hljs-function"><span class="hljs-title">setDate</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中月的某一天 (<span class="hljs-number">1</span> ~ <span class="hljs-number">31</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setMonth</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中月份 (<span class="hljs-number">0</span> ~ <span class="hljs-number">11</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setFullYear</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中的年份（四位数字）。<br><br><span class="hljs-function"><span class="hljs-title">setYear</span><span class="hljs-params">()</span></span><br><br>请使用 setFullYear () 方法代替。<br><br><span class="hljs-function"><span class="hljs-title">setHours</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中的小时 (<span class="hljs-number">0</span> ~ <span class="hljs-number">23</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setMinutes</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中的分钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setSeconds</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中的秒钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setMilliseconds</span><span class="hljs-params">()</span></span><br><br>设置 Date 对象中的毫秒 (<span class="hljs-number">0</span> ~ <span class="hljs-number">999</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setTime</span><span class="hljs-params">()</span></span><br><br>以毫秒设置 Date 对象。<br><br><span class="hljs-function"><span class="hljs-title">setUTCDate</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中月份的一天 (<span class="hljs-number">1</span> ~ <span class="hljs-number">31</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setUTCMonth</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中的月份 (<span class="hljs-number">0</span> ~ <span class="hljs-number">11</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setUTCFullYear</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中的年份（四位数字）。<br><br><span class="hljs-function"><span class="hljs-title">setUTCHours</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中的小时 (<span class="hljs-number">0</span> ~ <span class="hljs-number">23</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setUTCMinutes</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中的分钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setUTCSeconds</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中的秒钟 (<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span>)。<br><br><span class="hljs-function"><span class="hljs-title">setUTCMilliseconds</span><span class="hljs-params">()</span></span><br><br>根据世界时设置 Date 对象中的毫秒 (<span class="hljs-number">0</span> ~ <span class="hljs-number">999</span>)。<br><br><span class="hljs-function"><span class="hljs-title">toSource</span><span class="hljs-params">()</span></span><br><br>返回该对象的源代码。<br><br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><br>把 Date 对象转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">toTimeString</span><span class="hljs-params">()</span></span><br><br>把 Date 对象的时间部分转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">toDateString</span><span class="hljs-params">()</span></span><br><br>把 Date 对象的日期部分转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">toGMTString</span><span class="hljs-params">()</span></span><br><br>请使用 toUTCString () 方法代替。<br><br><span class="hljs-function"><span class="hljs-title">toUTCString</span><span class="hljs-params">()</span></span><br><br>根据世界时，把 Date 对象转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">toLocaleString</span><span class="hljs-params">()</span></span><br><br>根据本地时间格式，把 Date 对象转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">toLocaleTimeString</span><span class="hljs-params">()</span></span><br><br>根据本地时间格式，把 Date 对象的时间部分转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">toLocaleDateString</span><span class="hljs-params">()</span></span><br><br>根据本地时间格式，把 Date 对象的日期部分转换为字符串。<br><br><span class="hljs-function"><span class="hljs-title">UTC</span><span class="hljs-params">()</span></span><br><br>根据世界时返回 <span class="hljs-number">1970</span> 年 <span class="hljs-number">1</span> 月 <span class="hljs-number">1</span> 日 到指定日期的毫秒数。<br><br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><br><br>返回 Date 对象的原始值。<br></code></pre></td></tr></table></figure><h3 id="返回-设置年份方法"><a href="#返回-设置年份方法" class="headerlink" title="返回 &#x2F; 设置年份方法"></a>返回 &#x2F; 设置年份方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mydate=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mydate+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<span class="hljs-comment">//输出当前时间</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mydate.<span class="hljs-title function_">getFullYear</span>()+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<span class="hljs-comment">//输出当前年份</span><br>mydate.<span class="hljs-title function_">setFullYear</span>(<span class="hljs-number">81</span>); <span class="hljs-comment">//设置年份</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mydate+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//输出年份被设定为 0081年。</span><br></code></pre></td></tr></table></figure><h3 id="返回星期方法"><a href="#返回星期方法" class="headerlink" title="返回星期方法"></a>返回星期方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mydate=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//定义日期对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> weekday=[<span class="hljs-string">&quot;星期日&quot;</span>,<span class="hljs-string">&quot;星期一&quot;</span>,<span class="hljs-string">&quot;星期二&quot;</span>,<span class="hljs-string">&quot;星期三&quot;</span>,<span class="hljs-string">&quot;星期四&quot;</span>,<span class="hljs-string">&quot;星期五&quot;</span>,<span class="hljs-string">&quot;星期六&quot;</span>];</span><br><span class="language-javascript"><span class="hljs-comment">//定义数组对象,给每个数组项赋值</span></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mynum=mydate.<span class="hljs-title function_">getDay</span>();<span class="hljs-comment">//返回值存储在变量mynum中</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mydate.<span class="hljs-title function_">getDay</span>());<span class="hljs-comment">//输出getDay()获取值</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;今天是：&quot;</span>+ weekday[mynum]);<span class="hljs-comment">//输出星期几</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="返回-设置时间方法"><a href="#返回-设置时间方法" class="headerlink" title="返回 &#x2F; 设置时间方法"></a>返回 &#x2F; 设置时间方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mydate=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;当前时间：&quot;</span>+mydate+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">  mydate.<span class="hljs-title function_">setTime</span>(mydate.<span class="hljs-title function_">getTime</span>() + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;推迟一小时时间：&quot;</span> + mydate);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="String-字符串对象"><a href="#String-字符串对象" class="headerlink" title="String 字符串对象"></a>String 字符串对象</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function">对创建该对象的函数的引用</span><br><span class="hljs-function"><span class="hljs-title">length</span></span><br><span class="hljs-function">字符串的长度</span><br><span class="hljs-function"><span class="hljs-title">prototype</span></span><br><span class="hljs-function">允许您向对象添加属性和方法</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">anchor</span><span class="hljs-params">()</span></span><br><br>创建 HTML 锚。<br><br><span class="hljs-function"><span class="hljs-title">big</span><span class="hljs-params">()</span></span><br><br>用大号字体显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">blink</span><span class="hljs-params">()</span></span><br><br>显示闪动字符串。<br><br><span class="hljs-function"><span class="hljs-title">bold</span><span class="hljs-params">()</span></span><br><br>使用粗体显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">charAt</span><span class="hljs-params">()</span></span><br><br>返回在指定位置的字符。<br><br><span class="hljs-function"><span class="hljs-title">charCodeAt</span><span class="hljs-params">()</span></span><br><br>返回在指定的位置的字符的 Unicode 编码。<br><br><span class="hljs-function"><span class="hljs-title">concat</span><span class="hljs-params">()</span></span><br><br>连接字符串。<br><br><span class="hljs-function"><span class="hljs-title">fixed</span><span class="hljs-params">()</span></span><br><br>以打字机文本显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">fontcolor</span><span class="hljs-params">()</span></span><br><br>使用指定的颜色来显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">fontsize</span><span class="hljs-params">()</span></span><br><br>使用指定的尺寸来显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">fromCharCode</span><span class="hljs-params">()</span></span><br><br>从字符编码创建一个字符串。<br><br><span class="hljs-function"><span class="hljs-title">indexOf</span><span class="hljs-params">()</span></span><br><br>检索字符串。<br><br><span class="hljs-function"><span class="hljs-title">italics</span><span class="hljs-params">()</span></span><br><br>使用斜体显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">lastIndexOf</span><span class="hljs-params">()</span></span><br><br>从后向前搜索字符串。<br><br><span class="hljs-function"><span class="hljs-title">link</span><span class="hljs-params">()</span></span><br><br>将字符串显示为链接。<br><br><span class="hljs-function"><span class="hljs-title">localeCompare</span><span class="hljs-params">()</span></span><br><br>用本地特定的顺序来比较两个字符串。<br><br><span class="hljs-function"><span class="hljs-title">match</span><span class="hljs-params">()</span></span><br><br>找到一个或多个正则表达式的匹配。<br><br><span class="hljs-function"><span class="hljs-title">replace</span><span class="hljs-params">()</span></span><br><br>替换与正则表达式匹配的子串。<br><br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">()</span></span><br><br>检索与正则表达式相匹配的值。<br><br><span class="hljs-function"><span class="hljs-title">slice</span><span class="hljs-params">()</span></span><br><br>提取字符串的片断，并在新的字符串中返回被提取的部分。<br><br><span class="hljs-function"><span class="hljs-title">small</span><span class="hljs-params">()</span></span><br><br>使用小字号来显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">split</span><span class="hljs-params">()</span></span><br><br>把字符串分割为字符串数组。<br><br><span class="hljs-function"><span class="hljs-title">strike</span><span class="hljs-params">()</span></span><br><br>使用删除线来显示字符串。<br><br><span class="hljs-function"><span class="hljs-title">sub</span><span class="hljs-params">()</span></span><br><br>把字符串显示为下标。<br><br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">()</span></span><br><br>从起始索引号提取字符串中指定数目的字符。<br><br><span class="hljs-function"><span class="hljs-title">substring</span><span class="hljs-params">()</span></span><br><br>提取字符串中两个指定的索引号之间的字符。<br><br><span class="hljs-selector-tag">sup</span>()<br><br>把字符串显示为上标。<br><br><span class="hljs-function"><span class="hljs-title">toLocaleLowerCase</span><span class="hljs-params">()</span></span><br><br>把字符串转换为小写。<br><br><span class="hljs-function"><span class="hljs-title">toLocaleUpperCase</span><span class="hljs-params">()</span></span><br><br>把字符串转换为大写。<br><br><span class="hljs-function"><span class="hljs-title">toLowerCase</span><span class="hljs-params">()</span></span><br><br>把字符串转换为小写。<br><br><span class="hljs-function"><span class="hljs-title">toUpperCase</span><span class="hljs-params">()</span></span><br><br>把字符串转换为大写。<br><br><span class="hljs-function"><span class="hljs-title">toSource</span><span class="hljs-params">()</span></span><br><br>代表对象的源代码。<br><br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><br>返回字符串。<br><br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><br><br>返回某个字符串对象的原始值。<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">mystr</span>=<span class="hljs-string">&quot;Hello World!&quot;</span>;<br>var <span class="hljs-attribute">myl</span>=mystr.`length`;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var mystr<span class="hljs-operator">=</span><span class="hljs-string">&quot;Hello world!&quot;</span><span class="hljs-comment">;</span><br>var mynum<span class="hljs-operator">=</span>mystr.toUpperCase()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="返回指定位置的字符"><a href="#返回指定位置的字符" class="headerlink" title="返回指定位置的字符"></a>返回指定位置的字符</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">返回指定位置的字符<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;I love JavaScript!&quot;</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mystr.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">2</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="返回指定的字符串首次出现的位置"><a href="#返回指定的字符串首次出现的位置" class="headerlink" title="返回指定的字符串首次出现的位置"></a>返回指定的字符串首次出现的位置</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">stringObject.index<span class="hljs-constructor">Of(<span class="hljs-params">substring</span>, <span class="hljs-params">startpos</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;I love JavaScript!&quot;</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;I&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;v&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;v&quot;</span>,<span class="hljs-number">8</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="字符串分割-split"><a href="#字符串分割-split" class="headerlink" title="字符串分割 split ()"></a>字符串分割 split ()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stringObject.<span class="hljs-built_in">split</span>(separator,<span class="hljs-built_in">limit</span>)<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mystr = <span class="hljs-string">&quot;www.imooc.com&quot;</span>;<br>document.write(mystr.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>document.write(mystr.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">2</span>)+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">document.<span class="hljs-built_in">write</span>(mystr.split(<span class="hljs-string">&quot;&quot;</span>)+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>document.<span class="hljs-built_in">write</span>(mystr.split(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h3 id="提取字符串-substring"><a href="#提取字符串-substring" class="headerlink" title="提取字符串 substring ()"></a>提取字符串 substring ()</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">stringObject.substring(starP<span class="hljs-keyword">os</span>,stopP<span class="hljs-keyword">os</span>)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mystr=<span class="hljs-string">&quot;I love JavaScript&quot;</span>;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mystr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">7</span>));</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mystr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="提取指定数目的字符-substr"><a href="#提取指定数目的字符-substr" class="headerlink" title="提取指定数目的字符 substr ()"></a>提取指定数目的字符 substr ()</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">stringObject.<span class="hljs-meta">substr</span>(startPos,<span class="hljs-keyword">length</span>)<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">stringObject.<span class="hljs-meta">substr</span>(startPos,<span class="hljs-keyword">length</span>)<br></code></pre></td></tr></table></figure><h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mypi=<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> myabs=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">15</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mypi);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(myabs);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs tap">E<br><br>返回算术常量 e，即自然对数的底数（约等于 2.718）。<br><br>LN2<br><br>返回<span class="hljs-number"> 2 </span>的自然对数（约等于 0.693）。<br><br>LN10<br><br>返回<span class="hljs-number"> 10 </span>的自然对数（约等于 2.302）。<br><br>LOG2E<br><br>返回以<span class="hljs-number"> 2 </span>为底的 e 的对数（约等于 1.414）。<br><br>LOG10E<br><br>返回以<span class="hljs-number"> 10 </span>为底的 e 的对数（约等于 0.434）。<br><br>PI<br><br>返回圆周率（约等于 3.14159）。<br><br>SQRT1_2<br><br>返回返回<span class="hljs-number"> 2 </span>的平方根的倒数（约等于 0.707）。<br><br>SQRT2<br><br>返回<span class="hljs-number"> 2 </span>的平方根（约等于 1.414）。<br></code></pre></td></tr></table></figure><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs stylus">方法<br><br>描述<br><br><span class="hljs-function"><span class="hljs-title">abs</span><span class="hljs-params">(x)</span></span><br><br>返回数的绝对值。<br><br><span class="hljs-function"><span class="hljs-title">acos</span><span class="hljs-params">(x)</span></span><br><br>返回数的反余弦值。<br><br><span class="hljs-function"><span class="hljs-title">asin</span><span class="hljs-params">(x)</span></span><br><br>返回数的反正弦值。<br><br><span class="hljs-function"><span class="hljs-title">atan</span><span class="hljs-params">(x)</span></span><br><br>以介于 -PI/<span class="hljs-number">2</span> 与 PI/<span class="hljs-number">2</span> 弧度之间的数值来返回 x 的反正切值。<br><br><span class="hljs-function"><span class="hljs-title">atan2</span><span class="hljs-params">(y,x)</span></span><br><br>返回从 x 轴到点 (x,y) 的角度（介于 -PI/<span class="hljs-number">2</span> 与 PI/<span class="hljs-number">2</span> 弧度之间）。<br><br><span class="hljs-function"><span class="hljs-title">ceil</span><span class="hljs-params">(x)</span></span><br><br>对数进行上舍入。<br><br><span class="hljs-function"><span class="hljs-title">cos</span><span class="hljs-params">(x)</span></span><br><br>返回数的余弦。<br><br><span class="hljs-function"><span class="hljs-title">exp</span><span class="hljs-params">(x)</span></span><br><br>返回 e 的指数。<br><br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">(x)</span></span><br><br>对数进行下舍入。<br><br><span class="hljs-function"><span class="hljs-title">log</span><span class="hljs-params">(x)</span></span><br><br>返回数的自然对数（底为 e）。<br><br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">(x,y)</span></span><br><br>返回 x 和 y 中的最高值。<br><br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">(x,y)</span></span><br><br>返回 x 和 y 中的最低值。<br><br><span class="hljs-function"><span class="hljs-title">pow</span><span class="hljs-params">(x,y)</span></span><br><br>返回 x 的 y 次幂。<br><br><span class="hljs-function"><span class="hljs-title">random</span><span class="hljs-params">()</span></span><br><br>返回 <span class="hljs-number">0</span> ~ <span class="hljs-number">1</span> 之间的随机数。<br><br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">(x)</span></span><br><br>把数四舍五入为最接近的整数。<br><br><span class="hljs-function"><span class="hljs-title">sin</span><span class="hljs-params">(x)</span></span><br><br>返回数的正弦。<br><br><span class="hljs-function"><span class="hljs-title">sqrt</span><span class="hljs-params">(x)</span></span><br><br>返回数的平方根。<br><br><span class="hljs-function"><span class="hljs-title">tan</span><span class="hljs-params">(x)</span></span><br><br>返回角的正切。<br><br><span class="hljs-function"><span class="hljs-title">toSource</span><span class="hljs-params">()</span></span><br><br>返回该对象的源代码。<br><br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><br><br>返回 Math 对象的原始值。<br></code></pre></td></tr></table></figure><h3 id="向上取整-ceil"><a href="#向上取整-ceil" class="headerlink" title="向上取整 ceil ()"></a>向上取整 ceil ()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Math.<span class="hljs-built_in">ceil</span>(x)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">0.8</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">6.3</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">5</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">3.5</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(-<span class="hljs-number">5.1</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(-<span class="hljs-number">5.9</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="向下取整-floor"><a href="#向下取整-floor" class="headerlink" title="向下取整 floor ()"></a>向下取整 floor ()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Math.<span class="hljs-built_in">floor</span>(x)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">0.8</span>)+ <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">6.3</span>)+ <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">5</span>)+ <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">3.5</span>)+ <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(-<span class="hljs-number">5.1</span>)+ <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(-<span class="hljs-number">5.9</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="四舍五入-round"><a href="#四舍五入-round" class="headerlink" title="四舍五入 round ()"></a>四舍五入 round ()</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Math.<span class="hljs-built_in">round</span>(x)<br><br></code></pre></td></tr></table></figure><h3 id="随机数-random"><a href="#随机数-random" class="headerlink" title="随机数 random ()"></a>随机数 random ()</h3><p>random() 方法可返回介于 0 ~ 1（大于或等于 0 但小于 1 )之间的一个随机数。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Math.random()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array 数组对象"></a>Array 数组对象</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span>  数组名= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">var</span> 数组名 =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n);<br><span class="hljs-keyword">var</span>  数组名 = [&lt;元素<span class="hljs-number">1</span>&gt;, &lt;元素<span class="hljs-number">2</span>&gt;, &lt;元素<span class="hljs-number">3</span>&gt;...];<br><span class="hljs-keyword">var</span> myArray = [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>];<br>数组名[下标] = 值;<br><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">返回对创建此对象的数组函数的引用。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">length</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">设置或返回数组中元素的数目。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">prototype</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">使您有能力向对象添加属性和方法。</span><br></code></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">返回对创建此对象的数组函数的引用。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">length</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">设置或返回数组中元素的数目。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">prototype</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">使您有能力向对象添加属性和方法。</span><br></code></pre></td></tr></table></figure><h3 id="数组连接-concat"><a href="#数组连接-concat" class="headerlink" title="数组连接 concat ()"></a>数组连接 concat ()</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>Object.concat(<span class="hljs-built_in">array</span>1,<span class="hljs-built_in">array</span>2,...,<span class="hljs-built_in">array</span>N)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mya = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);</span><br><span class="language-javascript">  mya[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;1&quot;</span>;</span><br><span class="language-javascript">  mya[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;2&quot;</span>;</span><br><span class="language-javascript">  mya[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;3&quot;</span>;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mya.<span class="hljs-title function_">concat</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mya); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> mya = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);</span><br><span class="language-javascript">  mya[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;1&quot;</span>;</span><br><span class="language-javascript">  mya[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;2&quot;</span>;</span><br><span class="language-javascript">  mya[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;3&quot;</span>;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mya.<span class="hljs-title function_">concat</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(mya); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="指定分隔符连接数组元素-join"><a href="#指定分隔符连接数组元素-join" class="headerlink" title="指定分隔符连接数组元素 join ()"></a>指定分隔符连接数组元素 join ()</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>Object.join(分隔符)<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;script type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>  var myarr <span class="hljs-operator">=</span> new Array(<span class="hljs-number">3</span>)<span class="hljs-comment">;</span><br>  myarr[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;I&quot;</span><span class="hljs-comment">;</span><br>  myarr[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;love&quot;</span><span class="hljs-comment">;</span><br>  myarr[<span class="hljs-number">2</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JavaScript&quot;</span><span class="hljs-comment">;</span><br>  document.write(myarr.join())<span class="hljs-comment">;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;script type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>  var myarr <span class="hljs-operator">=</span> new Array(<span class="hljs-number">3</span>)<br>  myarr[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;I&quot;</span><span class="hljs-comment">;</span><br>  myarr[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;love&quot;</span><span class="hljs-comment">;</span><br>  myarr[<span class="hljs-number">2</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JavaScript&quot;</span><span class="hljs-comment">;</span><br>  document.write(myarr.join(<span class="hljs-string">&quot;.&quot;</span>))<span class="hljs-comment">;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="颠倒数组元素顺序-reverse"><a href="#颠倒数组元素顺序-reverse" class="headerlink" title="颠倒数组元素顺序 reverse ()"></a>颠倒数组元素顺序 reverse ()</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">arrayObject.<span class="hljs-keyword">reverse</span>()<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> myarr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>)</span><br><span class="language-javascript">  myarr[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;1&quot;</span></span><br><span class="language-javascript">  myarr[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;2&quot;</span></span><br><span class="language-javascript">  myarr[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;3&quot;</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(myarr + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(my<span class="hljs-string">`arr.reverse()`</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="选定元素-slice"><a href="#选定元素-slice" class="headerlink" title="选定元素 slice ()"></a>选定元素 slice ()</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">arrayObject.<span class="hljs-keyword">slice</span>(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>  <span class="hljs-attribute">var</span> myarr = new Array(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>  <span class="hljs-attribute">document</span>.write(myarr + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>  <span class="hljs-attribute">document</span>.write(myarr.slice(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>  <span class="hljs-attribute">document</span>.write(myarr);<br><span class="hljs-section">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h3 id="数组排序-sort"><a href="#数组排序-sort" class="headerlink" title="数组排序 sort ()"></a>数组排序 sort ()</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>Object.sort(方法函数)<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">myArray.sort(sortMethod)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> myarr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;love&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> myarr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;80&quot;</span>,<span class="hljs-string">&quot;16&quot;</span>,<span class="hljs-string">&quot;50&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(myarr1.<span class="hljs-title function_">sort</span>()+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(myarr2.<span class="hljs-title function_">sort</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sortNum</span>(<span class="hljs-params">a,b</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">return</span> a - b;</span><br><span class="language-javascript"> <span class="hljs-comment">//升序，如降序，把“a - b”该成“b - a”</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"> <span class="hljs-keyword">var</span> myarr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;80&quot;</span>,<span class="hljs-string">&quot;16&quot;</span>,<span class="hljs-string">&quot;50&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(myarr + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(myarr.<span class="hljs-title function_">sort</span>(sortNum));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h1><h2 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h2><h3 id="Javascript-计时器"><a href="#Javascript-计时器" class="headerlink" title="Javascript 计时器"></a>Javascript 计时器</h3><h4 id="计时器-setInterval"><a href="#计时器-setInterval" class="headerlink" title="计时器 setInterval ()"></a>计时器 setInterval ()</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">setInterval</span>(代码,交互时间);<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setInterval</span><span class="hljs-params">(<span class="hljs-string">&quot;clock()&quot;</span>,<span class="hljs-number">1000</span>)</span></span><br>或<br><span class="hljs-function"><span class="hljs-title">setInterval</span><span class="hljs-params">(clock,<span class="hljs-number">1000</span>)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计时器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> int=<span class="hljs-built_in">setInterval</span>(clock, <span class="hljs-number">100</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">clock</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> time=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;clock&quot;</span>).<span class="hljs-property">value</span> = time;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clock&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50&quot;</span>  /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="取消计时器-clearInterval"><a href="#取消计时器-clearInterval" class="headerlink" title="取消计时器 clearInterval ()"></a>取消计时器 clearInterval ()</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">clearInterval</span><span class="hljs-params">(id_of_setInterval)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计时器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">function</span> <span class="hljs-title function_">clock</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> time=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();                     </span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;clock&quot;</span>).<span class="hljs-property">value</span> = time;</span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 每隔100毫秒调用clock函数，并将返回值赋值给i</span></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> i=<span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;clock()&quot;</span>,<span class="hljs-number">100</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clock&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50&quot;</span>  /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Stop&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clearInterval(i)&quot;</span>  /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="计时器-setTimeout"><a href="#计时器-setTimeout" class="headerlink" title="计时器 setTimeout ()"></a>计时器 setTimeout ()</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">setTimeout</span>(代码,延迟时间);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;alert(&#x27;Hello!&#x27;)&quot;</span>, <span class="hljs-number">3000</span> );</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tinfo</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> t=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;alert(&#x27;Hello!&#x27;)&quot;</span>,<span class="hljs-number">5000</span>);</span><br><span class="language-javascript"> &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;tinfo()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> num=<span class="hljs-number">0</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">numCount</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;txt&#x27;</span>).<span class="hljs-property">value</span>=num;</span><br><span class="language-javascript"> num=num+<span class="hljs-number">1</span>;</span><br><span class="language-javascript"> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;numCount()&quot;</span>,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript"> &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Start&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;numCount()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="取消计时器-clearTimeout"><a href="#取消计时器-clearTimeout" class="headerlink" title="取消计时器 clearTimeout ()"></a>取消计时器 clearTimeout ()</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">clearTimeout</span><span class="hljs-params">(id_of_setTimeout)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> num=<span class="hljs-number">0</span>,i;</span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">timedCount</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;txt&#x27;</span>).<span class="hljs-property">value</span>=num;</span><br><span class="language-javascript">    num=num+<span class="hljs-number">1</span>;</span><br><span class="language-javascript">    i=<span class="hljs-built_in">setTimeout</span>(timedCount,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(timedCount,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">stopCount</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-built_in">clearTimeout</span>(i);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Stop&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;stopCount()&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">window<span class="hljs-selector-class">.history</span>.<span class="hljs-selector-attr">[属性|方法]</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">HL</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-property">length</span>;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-variable constant_">HL</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">window.history.back()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">window.history.go(-<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">window.history.forward()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">window.history.go(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(<span class="hljs-built_in">number</span>);<br></code></pre></td></tr></table></figure><h3 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">location.[属性<span class="hljs-string">|方法]</span><br></code></pre></td></tr></table></figure><h3 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> browser=navigator.<span class="hljs-property">appName</span>;</span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> b_version=navigator.<span class="hljs-property">appVersion</span>;</span><br><span class="language-javascript">   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Browser name&quot;</span>+browser);</span><br><span class="language-javascript">   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Browser version&quot;</span>+b_version);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="screen-对象"><a href="#screen-对象" class="headerlink" title="screen 对象"></a>screen 对象</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.screen.属性<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jest测试</title>
    <link href="/blog/1786204555.html"/>
    <url>/blog/1786204555.html</url>
    
    <content type="html"><![CDATA[<p>以下是一个简单的Jest测试示例，演示如何使用Jest来测试一个基本的JavaScript函数。假设我们有一个名为<code>add</code>的函数，用于将两个数字相加。</p><p>首先，确保你已经安装了Jest，如果没有，可以使用npm或yarn进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev jest<br></code></pre></td></tr></table></figure><p>然后，创建一个名为<code>math.js</code>的JavaScript文件，其中包含我们要测试的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// math.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = add;<br></code></pre></td></tr></table></figure><p>接下来，创建一个名为<code>math.test.js</code>的测试文件，用于编写测试用例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// math.test.js</span><br><span class="hljs-keyword">const</span> add = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./math&#x27;</span>);<br><br><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;addition of 1 + 2 should equal 3&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>);<br>&#125;);<br><br><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;addition of -1 + 1 should equal 0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">add</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">0</span>);<br>&#125;);<br><br><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;addition of 0 + 0 should equal 0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">0</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在上述测试文件中，我们导入了要测试的<code>add</code>函数，并使用<code>test</code>函数编写了三个测试用例。每个测试用例使用<code>expect</code>和匹配器函数（例如<code>toBe</code>）来断言函数的行为是否符合预期。</p><p>最后，你可以运行Jest来执行测试。在项目根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx jest<br></code></pre></td></tr></table></figure><p>Jest将自动运行<code>math.test.js</code>中的测试用例，并输出测试结果。如果所有测试通过，你将看到一条成功的消息。</p><p>这只是一个简单的示例，Jest支持更复杂的测试场景，如异步测试、模拟函数、测试React组件等。你可以根据项目需求扩展测试套件并使用Jest的其他功能来编写全面的测试。</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REDIS常用命令</title>
    <link href="/blog/215706356.html"/>
    <url>/blog/215706356.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、redis-启动"><a href="#一、redis-启动" class="headerlink" title="一、redis 启动"></a>一、redis 启动</h1><p>本地启动：<code>redis-cli</code></p><p>远程启动：<code>redis-cli -h host -p port -a password</code></p><p>Redis 连接命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">AUTH password<br></code></pre></td></tr></table></figure><p>验证密码是否正确</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ECHO</span> message<br></code></pre></td></tr></table></figure><p>打印字符串</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">PING</span><br></code></pre></td></tr></table></figure><p>查看服务是否运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">QUIT<br></code></pre></td></tr></table></figure><p>关闭当前连接</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SELECT index<br></code></pre></td></tr></table></figure><p>切换到指定的数据库</p><h1 id="二、redis-keys-命令"><a href="#二、redis-keys-命令" class="headerlink" title="二、redis keys 命令"></a>二、redis keys 命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">DEL</span> key<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DUMP key<br></code></pre></td></tr></table></figure><p>序列化给定的 key 并返回序列化的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXISTS key<br></code></pre></td></tr></table></figure><p>检查给定的 key 是否存在</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXPIRE key seconds<br></code></pre></td></tr></table></figure><p>为 key 设置过期时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXPIRE key timestamp<br></code></pre></td></tr></table></figure><p>用时间戳的方式给 key 设置过期时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PEXPIRE key milliseconds<br></code></pre></td></tr></table></figure><p>设置 key 的过期时间以毫秒计</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">KEYS pattern<br></code></pre></td></tr></table></figure><p>查找所有符合给定模式的 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">MOVE</span> key db<br></code></pre></td></tr></table></figure><p>将当前数据库的 key 移动到数据库 db 当中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PERSIST key<br></code></pre></td></tr></table></figure><p>移除 key 的过期时间，key 将持久保存</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PTTL key<br></code></pre></td></tr></table></figure><p>以毫秒为单位返回 key 的剩余过期时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">TTL key<br></code></pre></td></tr></table></figure><p>以秒为单位，返回给定 key 的剩余生存时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RANDOMKEY<br></code></pre></td></tr></table></figure><p>从当前数据库中随机返回一个 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">RENAME</span> key newkey<br></code></pre></td></tr></table></figure><p>修改 key 的名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RENAMENX key newkey<br></code></pre></td></tr></table></figure><p>仅当 newkey 不存在时，将 key 改名为 newkey</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">TYPE</span> key<br></code></pre></td></tr></table></figure><p>返回 key 所存储的值的类型</p><h1 id="三、reids-字符串命令"><a href="#三、reids-字符串命令" class="headerlink" title="三、reids 字符串命令"></a>三、reids 字符串命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">SET</span> key value<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">GET key<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">GETRANGE key <span class="hljs-built_in">start</span> end<br></code></pre></td></tr></table></figure><p>返回 key 中字符串值的子字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs `cmd">GETSET key value<br></code></pre></td></tr></table></figure><p>将给定 key 的值设为 value，并返回 key 的旧值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">GETBIT KEY OFFSET<br></code></pre></td></tr></table></figure><p>对 key 所储存的字符串值，获取指定偏移量上的位</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MGET KEY1 KEY2<br></code></pre></td></tr></table></figure><p>获取一个或者多个给定 key 的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETBIT KEY OFFSET VALUE<br></code></pre></td></tr></table></figure><p>对 key 所是存储的字符串值，设置或清除指定偏移量上的位</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETEX key seconds value<br></code></pre></td></tr></table></figure><p>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETNX key value<br></code></pre></td></tr></table></figure><p>只有在 key 不存在时设置 key 的值。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETRANGE key offset value<br></code></pre></td></tr></table></figure><p>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">STRLEN key<br></code></pre></td></tr></table></figure><p>返回 key 所储存的字符串值的长度。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MSET key value [key value ...]<br></code></pre></td></tr></table></figure><p>同时设置一个或多个 key-value 对。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MSETNX key value [key value ...]<br></code></pre></td></tr></table></figure><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PSETEX key milliseconds value<br></code></pre></td></tr></table></figure><p>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INCR key<br></code></pre></td></tr></table></figure><p>将 key 中储存的数字值增一。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INCRBY key increment<br></code></pre></td></tr></table></figure><p>将 key 所储存的值加上给定的增量值（increment）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INCRBYFLOAT key increment<br></code></pre></td></tr></table></figure><p>将 key 所储存的值加上给定的浮点增量值（increment）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DECR key<br></code></pre></td></tr></table></figure><p>将 key 中储存的数字值减一</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DECRBY key decrement<br></code></pre></td></tr></table></figure><p>key 所储存的值减去给定的减量值（decrement）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">APPEND</span> key value<br></code></pre></td></tr></table></figure><p>如果 key 已经存在并且是一个字符串， APPEND 命令将 指定 value 追加到改 key 原来的值（value）的末尾。</p><h1 id="四、Redis-hash-命令"><a href="#四、Redis-hash-命令" class="headerlink" title="四、Redis hash 命令"></a>四、Redis hash 命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HDEL key field1 [field2]<br></code></pre></td></tr></table></figure><p>删除一个或多个哈希表字段</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HEXISTS key field<br></code></pre></td></tr></table></figure><p>查看哈希表 key 中，指定的字段是否存在。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HGET key field<br></code></pre></td></tr></table></figure><p>获取存储在哈希表中指定字段的值。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HGETALL key<br></code></pre></td></tr></table></figure><p>获取在哈希表中指定 key 的所有字段和值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HINCRBY key field increment<br></code></pre></td></tr></table></figure><p>为哈希表 key 中的指定字段的整数值加上增量 increment 。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HINCRBYFLOAT key field increment<br></code></pre></td></tr></table></figure><p>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HKEYS key<br></code></pre></td></tr></table></figure><p>获取所有哈希表中的字段</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HLEN key<br></code></pre></td></tr></table></figure><p>获取哈希表中字段的数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HMGET key field1 [field2]<br></code></pre></td></tr></table></figure><p>获取所有给定字段的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HMSET key field1 value1 [field2 value2 ]<br></code></pre></td></tr></table></figure><p>同时将多个 field-value (域-值)对设置到哈希表 key 中。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HSET key field value<br></code></pre></td></tr></table></figure><p>将哈希表 key 中的字段 field 的值设为 value 。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HSETNX key field value<br></code></pre></td></tr></table></figure><p>只有在字段 field 不存在时，设置哈希表字段的值。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HVALS key<br></code></pre></td></tr></table></figure><p>获取哈希表中所有值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HSCAN key cursor [MATCH pattern] [COUNT count]<br></code></pre></td></tr></table></figure><p>迭代哈希表中的键值对。</p><h1 id="五、Redis-列表命令"><a href="#五、Redis-列表命令" class="headerlink" title="五、Redis 列表命令"></a>五、Redis 列表命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BLPOP key1 [key2 ] timeout<br></code></pre></td></tr></table></figure><p>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BRPOP key1 [key2 ] timeout<br></code></pre></td></tr></table></figure><p>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BRPOPLPUSH source destination timeout<br></code></pre></td></tr></table></figure><p>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LINDEX key index<br></code></pre></td></tr></table></figure><p>通过索引获取列表中的元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LINSERT key BEFORE|AFTER pivot value<br></code></pre></td></tr></table></figure><p>在列表的元素前或者后插入元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LLEN key<br></code></pre></td></tr></table></figure><p>获取列表长度</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LPOP key<br></code></pre></td></tr></table></figure><p>移出并获取列表的第一个元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LPUSH key value1 [value2]<br></code></pre></td></tr></table></figure><p>将一个或多个值插入到列表头部</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LPUSHX key value<br></code></pre></td></tr></table></figure><p>将一个值插入到已存在的列表头部</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LRANGE key <span class="hljs-built_in">start</span> stop<br></code></pre></td></tr></table></figure><p>获取列表指定范围内的元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LREM key count value<br></code></pre></td></tr></table></figure><p>移除列表元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LSET key index value<br></code></pre></td></tr></table></figure><p>通过索引设置列表元素的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LTRIM key <span class="hljs-built_in">start</span> stop<br></code></pre></td></tr></table></figure><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPOP key<br></code></pre></td></tr></table></figure><p>移除并获取列表最后一个元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPOPLPUSH source destination<br></code></pre></td></tr></table></figure><p>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPUSH key value1 [value2]<br></code></pre></td></tr></table></figure><p>在列表中添加一个或多个值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPUSHX key value<br></code></pre></td></tr></table></figure><p>为已存在的列表添加值</p><h1 id="六、Redis-集合命令"><a href="#六、Redis-集合命令" class="headerlink" title="六、Redis 集合命令"></a>六、Redis 集合命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SADD key member1 [member2]<br></code></pre></td></tr></table></figure><p>向集合添加一个或多个成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCARD key<br></code></pre></td></tr></table></figure><p>获取集合的成员数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SDIFF key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的差集</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SDIFFSTORE destination key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的差集并存储在 destination 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SINTER key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的交集</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SINTERSTORE destination key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的交集并存储在 destination 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SISMEMBER key member<br></code></pre></td></tr></table></figure><p>判断 member 元素是否是集合 key 的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SMEMBERS key<br></code></pre></td></tr></table></figure><p>返回集合中的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SMOVE source destination member<br></code></pre></td></tr></table></figure><p>将 member 元素从 source 集合移动到 destination 集合</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SPOP key<br></code></pre></td></tr></table></figure><p>移除并返回集合中的一个随机元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SRANDMEMBER key [count]<br></code></pre></td></tr></table></figure><p>返回集合中一个或多个随机数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SREM key member1 [member2]<br></code></pre></td></tr></table></figure><p>移除集合中一个或多个成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SUNION key1 [key2]<br></code></pre></td></tr></table></figure><p>返回所有给定集合的并集</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SUNIONSTORE destination key1 [key2]<br></code></pre></td></tr></table></figure><p>所有给定集合的并集存储在 destination 集合中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SSCAN key cursor [MATCH pattern] [COUNT count]<br></code></pre></td></tr></table></figure><p>迭代集合中的元素</p><h1 id="七、Redis-有序集合命令"><a href="#七、Redis-有序集合命令" class="headerlink" title="七、Redis 有序集合命令"></a>七、Redis 有序集合命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZADD key score1 member1 [score2 member2]<br></code></pre></td></tr></table></figure><p>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZCARD key<br></code></pre></td></tr></table></figure><p>获取有序集合的成员数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZCOUNT key min max<br></code></pre></td></tr></table></figure><p>计算在有序集合中指定区间分数的成员数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZINCRBY key increment member<br></code></pre></td></tr></table></figure><p>有序集合中对指定成员的分数加上增量 increment</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZINTERSTORE destination numkeys key [key ...]<br></code></pre></td></tr></table></figure><p>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZLEXCOUNT key min max<br></code></pre></td></tr></table></figure><p>在有序集合中计算指定字典区间内成员数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANGE key <span class="hljs-built_in">start</span> stop [WITHSCORES]<br></code></pre></td></tr></table></figure><p>通过索引区间返回有序集合成指定区间内的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANGEBYLEX key min max [LIMIT offset count]<br></code></pre></td></tr></table></figure><p>通过字典区间返回有序集合的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]<br></code></pre></td></tr></table></figure><p>通过分数返回有序集合指定区间内的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANK key member<br></code></pre></td></tr></table></figure><p>返回有序集合中指定成员的索引</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREM key member [member ...]<br></code></pre></td></tr></table></figure><p>移除有序集合中的一个或多个成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREMRANGEBYLEX key min max<br></code></pre></td></tr></table></figure><p>移除有序集合中给定的字典区间的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREMRANGEBYRANK key <span class="hljs-built_in">start</span> stop<br></code></pre></td></tr></table></figure><p>移除有序集合中给定的排名区间的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREMRANGEBYSCORE key min max<br></code></pre></td></tr></table></figure><p>移除有序集合中给定的分数区间的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREVRANGE key <span class="hljs-built_in">start</span> stop [WITHSCORES]<br></code></pre></td></tr></table></figure><p>返回有序集中指定区间内的成员，通过索引，分数从高到底</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREVRANGEBYSCORE key max min [WITHSCORES]<br></code></pre></td></tr></table></figure><p>返回有序集中指定分数区间内的成员，分数从高到低排序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREVRANK key member<br></code></pre></td></tr></table></figure><p>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZSCORE key member<br></code></pre></td></tr></table></figure><p>返回有序集中，成员的分数值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZUNIONSTORE destination numkeys key [key ...]<br></code></pre></td></tr></table></figure><p>计算给定的一个或多个有序集的并集，并存储在新的 key 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZSCAN key cursor [MATCH pattern] [COUNT count]<br></code></pre></td></tr></table></figure><p>迭代有序集合中的元素（包括元素成员和元素分值）</p><h1 id="八、Redis-事务命令"><a href="#八、Redis-事务命令" class="headerlink" title="八、Redis 事务命令"></a>八、Redis 事务命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISCARD<br></code></pre></td></tr></table></figure><p>取消事务，放弃执行事务块内的所有命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXEC<br></code></pre></td></tr></table></figure><p>执行所有事务块内的命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MULTI<br></code></pre></td></tr></table></figure><p>标记一个事务块的开始。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">UNWATCH<br></code></pre></td></tr></table></figure><p>取消 WATCH 命令对所有 key 的监视。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">WATCH key [key ...]<br></code></pre></td></tr></table></figure><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><h1 id="九、Redis-脚本命令"><a href="#九、Redis-脚本命令" class="headerlink" title="九、Redis 脚本命令"></a>九、Redis 脚本命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EVAL script numkeys key [key ...] arg [arg ...]<br></code></pre></td></tr></table></figure><p>执行 Lua 脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EVALSHA sha1 numkeys key [key ...] arg [arg ...]<br></code></pre></td></tr></table></figure><p>执行 Lua 脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT EXISTS script [script ...]<br></code></pre></td></tr></table></figure><p>查看指定的脚本是否已经被保存在缓存当中。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT FLUSH<br></code></pre></td></tr></table></figure><p>从脚本缓存中移除所有脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT KILL<br></code></pre></td></tr></table></figure><p>杀死当前正在运行的 Lua 脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT LOAD script<br></code></pre></td></tr></table></figure><p>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</p><p>十、Redis 服务器命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BGREWRITEAOF<br></code></pre></td></tr></table></figure><p>异步执行一个 AOF（AppendOnly File） 文件重写操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BGSAVE<br></code></pre></td></tr></table></figure><p>在后台异步保存当前数据库的数据到磁盘</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT KILL [ip:port] [ID client-id]<br></code></pre></td></tr></table></figure><p>关闭客户端连接</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT LIST<br></code></pre></td></tr></table></figure><p>获取连接到服务器的客户端连接列表</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT GETNAME<br></code></pre></td></tr></table></figure><p>获取连接的名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT <span class="hljs-built_in">PAUSE</span> timeout<br></code></pre></td></tr></table></figure><p>在指定时间内终止运行来自客户端的命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT SETNAME connection-name<br></code></pre></td></tr></table></figure><p>设置当前连接的名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLUSTER SLOTS<br></code></pre></td></tr></table></figure><p>获取集群节点的映射数组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND<br></code></pre></td></tr></table></figure><p>获取 Redis 命令详情数组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND COUNT<br></code></pre></td></tr></table></figure><p>获取 Redis 命令总数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND GETKEYS<br></code></pre></td></tr></table></figure><p>获取给定命令的所有键</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">TIME</span><br></code></pre></td></tr></table></figure><p>返回当前服务器时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND INFO command-name [command-name ...]<br></code></pre></td></tr></table></figure><p>获取指定 Redis 命令描述的数组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG GET parameter<br></code></pre></td></tr></table></figure><p>获取指定配置参数的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG REWRITE<br></code></pre></td></tr></table></figure><p>对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG <span class="hljs-built_in">SET</span> parameter value<br></code></pre></td></tr></table></figure><p>修改 redis 配置参数，无需重启</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG RESETSTAT<br></code></pre></td></tr></table></figure><p>重置 INFO 命令中的某些统计数据</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DBSIZE<br></code></pre></td></tr></table></figure><p>返回当前数据库的 key 的数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DEBUG OBJECT key<br></code></pre></td></tr></table></figure><p>获取 key 的调试信息</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DEBUG SEGFAULT<br></code></pre></td></tr></table></figure><p>让 Redis 服务崩溃</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">FLUSHALL<br></code></pre></td></tr></table></figure><p>删除所有数据库的所有 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">FLUSHDB<br></code></pre></td></tr></table></figure><p>删除当前数据库的所有 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INFO [section]<br></code></pre></td></tr></table></figure><p>获取 Redis 服务器的各种信息和统计数值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LASTSAVE<br></code></pre></td></tr></table></figure><p>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MONITOR<br></code></pre></td></tr></table></figure><p>实时打印出 Redis 服务器接收到的命令，调试用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ROLE<br></code></pre></td></tr></table></figure><p>返回主从实例所属的角色</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SAVE<br></code></pre></td></tr></table></figure><p>同步保存数据到硬盘</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SHUTDOWN [NOSAVE] [SAVE]<br></code></pre></td></tr></table></figure><p>异步保存数据到硬盘，并关闭服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SLAVEOF host port<br></code></pre></td></tr></table></figure><p>将当前服务器转变为指定服务器的从属服务器(slave server)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SLOWLOG subcommand [argument]<br></code></pre></td></tr></table></figure><p>管理 redis 的慢日志</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SYNC<br></code></pre></td></tr></table></figure><p>用于复制功能(replication)的内部命令</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Urllib库使用</title>
    <link href="/blog/104473986.html"/>
    <url>/blog/104473986.html</url>
    
    <content type="html"><![CDATA[<h1 id="请求网页"><a href="#请求网页" class="headerlink" title="请求网页"></a>请求网页</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib2<br><br>response = urllib2.urlopen(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><span class="hljs-built_in">print</span> response.read()<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> demo.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><h1 id="分析返回"><a href="#分析返回" class="headerlink" title="分析返回"></a>分析返回</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">response = urllib2<span class="hljs-selector-class">.urlopen</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">urlopen</span><span class="hljs-params">(url, data, timeout)</span></span><br>print response<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><h1 id="构造Request"><a href="#构造Request" class="headerlink" title="构造Request"></a>构造Request</h1><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">import urllib2<br><br><span class="hljs-built_in">request</span> = urllib2.<span class="hljs-built_in">Request</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><span class="hljs-built_in">response</span> = urllib2.urlopen(<span class="hljs-built_in">request</span>)<br>print <span class="hljs-built_in">response</span>.read()<br></code></pre></td></tr></table></figure><h1 id="POST-方式"><a href="#POST-方式" class="headerlink" title="POST 方式"></a>POST 方式</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib2<br><br><span class="hljs-title">values</span> = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;310869927@qq.com&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;XXXX&quot;</span>&#125;<br><span class="hljs-class"><span class="hljs-keyword">data</span> = urllib.urlencode(<span class="hljs-title">values</span>) </span><br><span class="hljs-title">url</span> = <span class="hljs-string">&quot;https://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn&quot;</span><br><span class="hljs-title">request</span> = urllib2.<span class="hljs-type">Request</span>(url,<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><span class="hljs-title">response</span> = urllib2.urlopen(request)<br><span class="hljs-title">print</span> response.read()<br></code></pre></td></tr></table></figure><h1 id="GET-方式"><a href="#GET-方式" class="headerlink" title="GET 方式"></a>GET 方式</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib2<br><br><span class="hljs-title">values</span> = &#123;&#125;<br><span class="hljs-title">values</span>[&#x27;username&#x27;] = <span class="hljs-string">&quot;310869927@qq.com&quot;</span><br><span class="hljs-title">values</span>[&#x27;password&#x27;] = <span class="hljs-string">&quot;XXXX&quot;</span><br><span class="hljs-class"><span class="hljs-keyword">data</span> = urllib.urlencode(<span class="hljs-title">values</span>) </span><br><span class="hljs-title">url</span> = <span class="hljs-string">&quot;http://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn&quot;</span><br><span class="hljs-title">request</span> = urllib2.<span class="hljs-type">Request</span>(url,<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><span class="hljs-title">response</span> = urllib2.urlopen(request)<br><span class="hljs-title">print</span> response.read()<br></code></pre></td></tr></table></figure><h1 id="设置-Headers"><a href="#设置-Headers" class="headerlink" title="设置 Headers"></a>设置 Headers</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> urllib  <br><span class="hljs-keyword">import</span> urllib2  <br><br>url = <span class="hljs-string">&#x27;http://www.server.com/login&#x27;</span><br>user_agent = <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span>  <br><span class="hljs-keyword">values</span> = &#123;<span class="hljs-string">&#x27;username&#x27;</span> : <span class="hljs-string">&#x27;jhayes&#x27;</span>,  <span class="hljs-string">&#x27;password&#x27;</span> : <span class="hljs-string">&#x27;XXXX&#x27;</span> &#125;  <br>headers = &#123; <span class="hljs-string">&#x27;User-Agent&#x27;</span> : user_agent &#125;  <br>data = urllib.urlencode(<span class="hljs-keyword">values</span>)  <br>request = urllib2.Request(url, data, headers)  <br>response = urllib2.urlopen(request)  <br>page = response.<span class="hljs-keyword">read</span>()<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> urllib  <br><span class="hljs-keyword">import</span> urllib2  <br><br>url = <span class="hljs-string">&#x27;http://www.server.com/login&#x27;</span><br>user_agent = <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span>  <br><span class="hljs-keyword">values</span> = &#123;<span class="hljs-string">&#x27;username&#x27;</span> : <span class="hljs-string">&#x27;jhayes&#x27;</span>,  <span class="hljs-string">&#x27;password&#x27;</span> : <span class="hljs-string">&#x27;XXXX&#x27;</span> &#125;  <br>headers = &#123; <span class="hljs-string">&#x27;User-Agent&#x27;</span> : user_agent &#125;  <br>data = urllib.urlencode(<span class="hljs-keyword">values</span>)  <br>request = urllib2.Request(url, data, headers)  <br>response = urllib2.urlopen(request)  <br>page = response.<span class="hljs-keyword">read</span>()<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">headers</span> = &#123; <span class="hljs-string">&#x27;User-Agent&#x27;</span> : <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span>  ,<br>                        <span class="hljs-string">&#x27;Referer&#x27;</span>:<span class="hljs-string">&#x27;http://www.zhihu.com/articles&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><h1 id="Proxy（代理）的设置"><a href="#Proxy（代理）的设置" class="headerlink" title="Proxy（代理）的设置"></a>Proxy（代理）的设置</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import urllib2<br>enable_proxy = True<br>proxy_handler = urllib2.<span class="hljs-constructor">ProxyHandler(&#123;<span class="hljs-string">&quot;http&quot;</span> : &#x27;<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">some</span>-<span class="hljs-params">proxy</span>.<span class="hljs-params">com</span>:8080&#x27;&#125;)</span><br>null_proxy_handler = urllib2.<span class="hljs-constructor">ProxyHandler(&#123;&#125;)</span><br><span class="hljs-keyword">if</span> enable_proxy:<br>    opener = urllib2.build<span class="hljs-constructor">_opener(<span class="hljs-params">proxy_handler</span>)</span><br><span class="hljs-keyword">else</span>:<br>    opener = urllib2.build<span class="hljs-constructor">_opener(<span class="hljs-params">null_proxy_handler</span>)</span><br>urllib2.install<span class="hljs-constructor">_opener(<span class="hljs-params">opener</span>)</span><br></code></pre></td></tr></table></figure><h1 id="Timeout-设置"><a href="#Timeout-设置" class="headerlink" title="Timeout 设置"></a>Timeout 设置</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> urllib2<br><span class="hljs-title">response</span> = urllib2.urlopen(&#x27;http://www.baidu.com&#x27;, timeout=<span class="hljs-number">10</span>)<br><span class="hljs-keyword">import</span> urllib2<br><span class="hljs-title">response</span> = urllib2.urlopen(&#x27;http://www.baidu.com&#x27;,<span class="hljs-class"><span class="hljs-keyword">data</span>, 10)</span><br><br></code></pre></td></tr></table></figure><h1 id="PUT-DELETE"><a href="#PUT-DELETE" class="headerlink" title="PUT &#x2F; DELETE"></a>PUT &#x2F; DELETE</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> urllib2<br><span class="hljs-title">request</span> = urllib2.<span class="hljs-type">Request</span>(uri, <span class="hljs-class"><span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)</span><br><span class="hljs-title">request</span>.get_method = lambda: &#x27;<span class="hljs-type">PUT&#x27;</span> # or &#x27;<span class="hljs-type">DELETE&#x27;</span><br><span class="hljs-title">response</span> = urllib2.urlopen(request)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Urllib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jest端对端测试</title>
    <link href="/blog/2198107746.html"/>
    <url>/blog/2198107746.html</url>
    
    <content type="html"><![CDATA[<p>以下是一个简单的示例，演示如何使用 Cypress 测试 Vue.js 应用程序。</p><p>首先，确保你已经安装了 Vue.js 和 Cypress。如果没有，你可以使用 npm 或 yarn 进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue cypress --save-dev<br></code></pre></td></tr></table></figure><p>接下来，创建一个 Vue.js 应用程序。你可以使用 Vue CLI 来快速创建一个新的 Vue.js 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @vue/cli<br>vue create my-vue-app<br></code></pre></td></tr></table></figure><p>在 Vue.js 应用程序中，你可以创建一个组件，然后在组件中添加一些交互性。例如，创建一个名为<code>Counter.vue</code>的组件，该组件包含一个计数器按钮和显示计数的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">// Counter.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;<br>    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      count: 0,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    increment() &#123;<br>      this.count++;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>接下来，创建一个 Cypress 测试文件，例如<code>counter.spec.js</code>，用于编写 E2E 测试用例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// counter.spec.js</span><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&quot;Counter&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&quot;increments the counter when the button is clicked&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    cy.<span class="hljs-title function_">visit</span>(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>); <span class="hljs-comment">// 修改为你的应用程序地址</span><br><br>    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>();<br><br>    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&quot;have.text&quot;</span>, <span class="hljs-string">&quot;Count: 1&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&quot;resets the counter to 0 when the button is clicked twice&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    cy.<span class="hljs-title function_">visit</span>(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>); <span class="hljs-comment">// 修改为你的应用程序地址</span><br><br>    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>().<span class="hljs-title function_">click</span>();<br><br>    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&quot;have.text&quot;</span>, <span class="hljs-string">&quot;Count: 0&quot;</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在上述测试文件中，我们使用<code>cy.visit</code>访问我们的 Vue.js 应用程序，然后使用 Cypress 命令模拟用户点击按钮并验证计数是否正确变化。</p><p>最后，你可以在终端中运行 Cypress 来执行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx cypress open<br></code></pre></td></tr></table></figure><p>Cypress 会打开一个交互式测试运行器，你可以在其中选择要运行的测试文件。运行测试后，你将看到 Cypress 的交互式界面，其中包含测试结果和测试过程的截图。</p><p>这只是一个简单的示例，Cypress 支持更复杂的测试场景，如表单交互、路由测试、模拟 API 调用等。你可以根据项目需求扩展测试套件并使用 Cypress 的其他功能来编写全面的 E2E 测试。</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 正则表达式</title>
    <link href="/blog/1608380679.html"/>
    <url>/blog/1608380679.html</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式的语法规则"><a href="#正则表达式的语法规则" class="headerlink" title="正则表达式的语法规则"></a>正则表达式的语法规则</h1><p><a href="https://www.z4a.net/image/V3Ck5E"><img src="https://www.z4a.net/images/2023/09/06/20130515113723855-e1424095177180.png" alt="20130515113723855-e1424095177180.png"></a></p><h1 id="正则表达式相关注解"><a href="#正则表达式相关注解" class="headerlink" title="正则表达式相关注解"></a>正则表达式相关注解</h1><h2 id="（1）数量词的贪婪模式与非贪婪模式"><a href="#（1）数量词的贪婪模式与非贪婪模式" class="headerlink" title="（1）数量词的贪婪模式与非贪婪模式"></a>（1）数量词的贪婪模式与非贪婪模式</h2><p>正则表达式通常用于在文本中查找匹配的字符串。Python 里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab“如果用于查找” abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab?”，将找到”a”。 注：我们一般使用非贪婪模式来提取。</p><h2 id="（2）反斜杠问题"><a href="#（2）反斜杠问题" class="headerlink" title="（2）反斜杠问题"></a>（2）反斜杠问题</h2><p>与大多数编程语言相同，正则表达式里使用”\“作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\“，那么使用编程语言表示的正则表达式里将需要 4 个反斜杠”\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。 Python 里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用 r”\“表示。同样，匹配一个数字的”\d” 可以写成 r”\d”。有了原生字符串，妈妈也不用担心是不是漏写了反斜杠，写出来的表达式也更直观勒。</p><h1 id="Python-Re-模块"><a href="#Python-Re-模块" class="headerlink" title="Python Re 模块"></a>Python Re 模块</h1><p>Python 自带了 re 模块，它提供了对正则表达式的支持。主要用到的方法列举如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#返回pattern对象<br>re<span class="hljs-selector-class">.compile</span>(string<span class="hljs-selector-attr">[,flag]</span>)  <br>#以下为匹配所用函数<br>re<span class="hljs-selector-class">.match</span>(pattern, string<span class="hljs-selector-attr">[, flags]</span>)<br>re<span class="hljs-selector-class">.search</span>(pattern, string<span class="hljs-selector-attr">[, flags]</span>)<br>re<span class="hljs-selector-class">.split</span>(pattern, string<span class="hljs-selector-attr">[, maxsplit]</span>)<br>re<span class="hljs-selector-class">.findall</span>(pattern, string<span class="hljs-selector-attr">[, flags]</span>)<br>re<span class="hljs-selector-class">.finditer</span>(pattern, string<span class="hljs-selector-attr">[, flags]</span>)<br>re<span class="hljs-selector-class">.sub</span>(pattern, repl, string<span class="hljs-selector-attr">[, count]</span>)<br>re<span class="hljs-selector-class">.subn</span>(pattern, repl, string<span class="hljs-selector-attr">[, count]</span>)<br></code></pre></td></tr></table></figure><p>在介绍这几个方法之前，我们先来介绍一下 pattern 的概念，pattern 可以理解为一个匹配模式，那么我们怎么获得这个匹配模式呢？很简单，我们需要利用 re.compile 方法就可以。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在参数中我们传入了原生字符串对象，通过 compile 方法编译生成一个 pattern 对象，然后我们利用这个对象来进行进一步的匹配。 另外大家可能注意到了另一个参数 flags，在这里解释一下这个参数的含义： 参数 flag 是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如 re.I | re.M。 可选值有：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">• re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）<br>• re.M(全拼：MULTILINE): 多行模式，改变<span class="hljs-string">&#x27;^&#x27;</span>和<span class="hljs-string">&#x27;$&#x27;</span>的行为（参见上图）<br>• re.S(全拼：DOTALL): 点任意匹配模式，改变<span class="hljs-string">&#x27;.&#x27;</span>的行为<br>• re.L(全拼：LOCALE): 使预定字符类 <span class="hljs-string">\w</span> <span class="hljs-string">\W</span> <span class="hljs-string">\b</span> <span class="hljs-string">\B</span> <span class="hljs-string">\s</span> <span class="hljs-string">\S</span> 取决于当前区域设定<br>• re.U(全拼：UNICODE): 使预定字符类 <span class="hljs-string">\w</span> <span class="hljs-string">\W</span> <span class="hljs-string">\b</span> <span class="hljs-string">\B</span> <span class="hljs-string">\s</span> <span class="hljs-string">\S</span> <span class="hljs-string">\d</span> <span class="hljs-string">\D</span> 取决于unicode定义的字符属性<br>• re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。<br></code></pre></td></tr></table></figure><h2 id="（1）re-match-pattern-string-flags"><a href="#（1）re-match-pattern-string-flags" class="headerlink" title="（1）re.match(pattern, string[, flags])"></a>（1）re.match(pattern, string[, flags])</h2><p>这个方法将会从 string（我们要匹配的字符串）的开头开始，尝试匹配 pattern，一直向后匹配，如果遇到无法匹配的字符，立即返回 None，如果匹配未结束已经到达 string 的末尾，也会返回 None。两个结果均表示匹配失败，否则匹配 pattern 成功，同时匹配终止，不再对 string 向后匹配。下面我们通过一个例子理解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">__author__ = <span class="hljs-string">&#x27;CQC&#x27;</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment">#导入re模块</span><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 将正则表达式编译成Pattern对象，注意hello前面的r的意思是“原生字符串”</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment"># 使用re.match匹配文本，获得匹配结果，无法匹配时将返回None</span><br>result1 = re.<span class="hljs-keyword">match</span>(pattern,<span class="hljs-string">&#x27;hello&#x27;</span>)<br>result2 = re.<span class="hljs-keyword">match</span>(pattern,<span class="hljs-string">&#x27;helloo CQC!&#x27;</span>)<br>result3 = re.<span class="hljs-keyword">match</span>(pattern,<span class="hljs-string">&#x27;helo CQC!&#x27;</span>)<br>result4 = re.<span class="hljs-keyword">match</span>(pattern,<span class="hljs-string">&#x27;hello CQC!&#x27;</span>)<br><br><span class="hljs-comment">#如果1匹配成功</span><br><span class="hljs-keyword">if</span> result1:<br>    <span class="hljs-comment"># 使用Match获得分组信息</span><br>    <span class="hljs-built_in">print</span> result1.group()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;1匹配失败！&#x27;</span><br><br><br><span class="hljs-comment">#如果2匹配成功</span><br><span class="hljs-keyword">if</span> result2:<br>    <span class="hljs-comment"># 使用Match获得分组信息</span><br>    <span class="hljs-built_in">print</span> result2.group()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;2匹配失败！&#x27;</span><br><br><br><span class="hljs-comment">#如果3匹配成功</span><br><span class="hljs-keyword">if</span> result3:<br>    <span class="hljs-comment"># 使用Match获得分组信息</span><br>    <span class="hljs-built_in">print</span> result3.group()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;3匹配失败！&#x27;</span><br><br><span class="hljs-comment">#如果4匹配成功</span><br><span class="hljs-keyword">if</span> result4:<br>    <span class="hljs-comment"># 使用Match获得分组信息</span><br>    <span class="hljs-built_in">print</span> result4.group()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;4匹配失败！&#x27;</span><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hello</span><br>hello<br><span class="hljs-number">3</span>匹配失败！<br>hello<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#一个简单的match实例</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-comment"># 匹配如下内容：单词+空格+单词+任意字符</span><br>m = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;(\w+) (\w+)(?P&lt;sign&gt;.*)&#x27;</span>, <span class="hljs-string">&#x27;hello world!&#x27;</span>)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.string:&quot;</span>, m.string<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.re:&quot;</span>, m.re<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.pos:&quot;</span>, m.pos<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.endpos:&quot;</span>, m.endpos<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.lastindex:&quot;</span>, m.lastindex<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.lastgroup:&quot;</span>, m.lastgroup<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.group():&quot;</span>, m.group()<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.group(1,2):&quot;</span>, m.group(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.groups():&quot;</span>, m.groups()<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.groupdict():&quot;</span>, m.groupdict()<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.start(2):&quot;</span>, m.start(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.end(2):&quot;</span>, m.end(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;m.span(2):&quot;</span>, m.span(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">r&quot;m.expand(r&#x27;\g \g\g&#x27;):&quot;</span>, m.expand(<span class="hljs-string">r&#x27;\2 \1\3&#x27;</span>)<br> <br><span class="hljs-comment">### output ###</span><br><span class="hljs-comment"># m.string: hello world!</span><br><span class="hljs-comment"># m.re: </span><br><span class="hljs-comment"># m.pos: 0</span><br><span class="hljs-comment"># m.endpos: 12</span><br><span class="hljs-comment"># m.lastindex: 3</span><br><span class="hljs-comment"># m.lastgroup: sign</span><br><span class="hljs-comment"># m.group(1,2): (&#x27;hello&#x27;, &#x27;world&#x27;)</span><br><span class="hljs-comment"># m.groups(): (&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;!&#x27;)</span><br><span class="hljs-comment"># m.groupdict(): &#123;&#x27;sign&#x27;: &#x27;!&#x27;&#125;</span><br><span class="hljs-comment"># m.start(2): 6</span><br><span class="hljs-comment"># m.end(2): 11</span><br><span class="hljs-comment"># m.span(2): (6, 11)</span><br><span class="hljs-comment"># m.expand(r&#x27;\2 \1\3&#x27;): world hello!</span><br></code></pre></td></tr></table></figure><h2 id="（2）re-search-pattern-string-flags"><a href="#（2）re-search-pattern-string-flags" class="headerlink" title="（2）re.search(pattern, string[, flags])"></a>（2）re.search(pattern, string[, flags])</h2><p>search 方法与 match 方法极其类似，区别在于 match () 函数只检测 re 是不是在 string 的开始位置匹配，search () 会扫描整个 string 查找匹配，match（）只有在 0 位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，match () 就返回 None。同样，search 方法的返回对象同样 match () 返回对象的方法和属性。我们用一个例子感受一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入re模块</span><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 将正则表达式编译成Pattern对象</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;world&#x27;</span>)<br><span class="hljs-comment"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None</span><br><span class="hljs-comment"># 这个例子中使用match()无法成功匹配</span><br><span class="hljs-keyword">match</span> = re.search(pattern,<span class="hljs-string">&#x27;hello world!&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>    <span class="hljs-comment"># 使用Match获得分组信息</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-keyword">match</span>.group()<br><span class="hljs-comment">### 输出 ###</span><br><span class="hljs-comment"># world</span><br></code></pre></td></tr></table></figure><h2 id="（3）re-split-pattern-string-maxsplit"><a href="#（3）re-split-pattern-string-maxsplit" class="headerlink" title="（3）re.split(pattern, string[, maxsplit])"></a>（3）re.split(pattern, string[, maxsplit])</h2><p>按照能够匹配的子串将 string 分割后返回列表。maxsplit 用于指定最大分割次数，不指定将全部分割。我们通过下面的例子感受一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>)<br><span class="hljs-built_in">print</span> re.split(pattern,<span class="hljs-string">&#x27;one1two2three3four4&#x27;</span>)<br><br><span class="hljs-comment">### 输出 ###</span><br><span class="hljs-comment"># [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;, &#x27;&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="（4）re-findall-pattern-string-flags"><a href="#（4）re-findall-pattern-string-flags" class="headerlink" title="（4）re.findall(pattern, string[, flags])"></a>（4）re.findall(pattern, string[, flags])</h2><p>搜索 string，以列表形式返回全部能匹配的子串。我们通过这个例子来感受一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>)<br><span class="hljs-built_in">print</span> re.findall(pattern,<span class="hljs-string">&#x27;one1two2three3four4&#x27;</span>)<br><br><span class="hljs-comment">### 输出 ###</span><br><span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="（5）re-finditer-pattern-string-flags"><a href="#（5）re-finditer-pattern-string-flags" class="headerlink" title="（5）re.finditer(pattern, string[, flags])"></a>（5）re.finditer(pattern, string[, flags])</h2><p>搜索 string，返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。我们通过下面的例子来感受一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>)<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> re.finditer(pattern,<span class="hljs-string">&#x27;one1two2three3four4&#x27;</span>):<br>    <span class="hljs-built_in">print</span> m.group(),<br><br><span class="hljs-comment">### 输出 ###</span><br><span class="hljs-comment"># 1 2 3 4</span><br></code></pre></td></tr></table></figure><h2 id="（6）re-sub-pattern-repl-string-count"><a href="#（6）re-sub-pattern-repl-string-count" class="headerlink" title="（6）re.sub(pattern, repl, string[, count])"></a>（6）re.sub(pattern, repl, string[, count])</h2><p>使用 repl 替换 string 中每一个匹配的子串后返回替换后的字符串。 当 repl 是一个字符串时，可以使用 \id 或 \g、\g 引用分组，但不能使用编号 0。 当 repl 是一个方法时，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。 count 用于指定最多替换次数，不指定时全部替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(\w+) (\w+)&#x27;</span>)<br>s = <span class="hljs-string">&#x27;i say, hello world!&#x27;</span><br><br><span class="hljs-built_in">print</span> re.sub(pattern,<span class="hljs-string">r&#x27;\2 \1&#x27;</span>, s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> m.group(<span class="hljs-number">1</span>).title() + <span class="hljs-string">&#x27; &#x27;</span> + m.group(<span class="hljs-number">2</span>).title()<br><br><span class="hljs-built_in">print</span> re.sub(pattern,func, s)<br><br><span class="hljs-comment">### output ###</span><br><span class="hljs-comment"># say i, world hello!</span><br><span class="hljs-comment"># I Say, Hello World!</span><br></code></pre></td></tr></table></figure><h2 id="（7）re-subn-pattern-repl-string-count"><a href="#（7）re-subn-pattern-repl-string-count" class="headerlink" title="（7）re.subn(pattern, repl, string[, count])"></a>（7）re.subn(pattern, repl, string[, count])</h2><p>返回 (sub (repl, string [, count]), 替换次数)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br> <br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(\w+) (\w+)&#x27;</span>)<br>s = <span class="hljs-string">&#x27;i say, hello world!&#x27;</span><br> <br><span class="hljs-built_in">print</span> re.subn(pattern,<span class="hljs-string">r&#x27;\2 \1&#x27;</span>, s)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> m.group(<span class="hljs-number">1</span>).title() + <span class="hljs-string">&#x27; &#x27;</span> + m.group(<span class="hljs-number">2</span>).title()<br> <br><span class="hljs-built_in">print</span> re.subn(pattern,func, s)<br> <br><span class="hljs-comment">### output ###</span><br><span class="hljs-comment"># (&#x27;say i, world hello!&#x27;, 2)</span><br><span class="hljs-comment"># (&#x27;I Say, Hello World!&#x27;, 2)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tailwindcss使用</title>
    <link href="/blog/2825123158.html"/>
    <url>/blog/2825123158.html</url>
    
    <content type="html"><![CDATA[<p>Tailwind CSS是一个基于原子类的CSS框架，它提供了一组预定义的类名，用于快速构建和定制网页界面。以下是一些Tailwind CSS的重要语法和概念：</p><ol><li><p><strong>类名</strong>：</p><ul><li>Tailwind CSS的核心是一组类名，这些类名用于定义样式。</li><li>类名通常以<code>tw-</code>开头，例如<code>tw-bg-blue-500</code>表示背景色为蓝色的元素。</li></ul></li><li><p><strong>Utility类</strong>：</p><ul><li>Tailwind CSS提供了大量的实用类，用于设置元素的样式属性，如颜色、边距、填充、宽度、高度等。</li><li>例如，<code>tw-text-red-600</code>用于将文本颜色设置为红色，<code>tw-m-4</code>用于添加四个方向的边距。</li></ul></li><li><p><strong>响应式类</strong>：</p><ul><li>可以在类名中添加响应式前缀，例如<code>tw-text-sm md:tw-text-lg</code>表示在小屏幕上使用小号文本，大屏幕上使用大号文本。</li></ul></li><li><p><strong>伪类和伪元素</strong>：</p><ul><li>Tailwind CSS支持伪类和伪元素，例如<code>tw-hover:tw-bg-blue-200</code>用于在悬停时更改背景颜色。</li></ul></li><li><p><strong>组合类</strong>：</p><ul><li>可以将多个类名组合在一起，以构建复杂的样式，例如<code>tw-bg-blue-500 tw-text-white tw-p-4</code>。</li></ul></li><li><p><strong>定制主题</strong>：</p><ul><li>Tailwind CSS允许你自定义颜色、字体、边框、阴影等属性，以适应项目的需求。</li><li>可以通过配置文件来定制主题，然后使用对应的类名。</li></ul></li><li><p><strong>插件</strong>：</p><ul><li>你可以使用插件来扩展Tailwind CSS，添加自定义的类名和样式。</li></ul></li><li><p><strong>样式层叠</strong>：</p><ul><li>Tailwind CSS的类名是按照特定顺序生成的，因此后面的类名可以覆盖前面的类名，实现样式层叠。</li></ul></li><li><p><strong>组件化</strong>：</p><ul><li>可以将Tailwind CSS类名应用于HTML元素，将界面分解成独立的组件，易于维护和重用。</li></ul></li><li><p><strong>文档和学习资源</strong>：</p><ul><li>Tailwind CSS官方文档提供了详细的类名和样式属性的列表，以及示例和用法说明。</li></ul></li></ol><p>Tailwind CSS的语法简单明了，允许开发者快速构建界面，同时提供了强大的定制能力。通过合理使用类名，可以有效地管理样式，并降低样式冲突的可能性。学会使用Tailwind CSS可以提高前端开发的效率。</p>]]></content>
    
    
    <categories>
      
      <category>css3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础</title>
    <link href="/blog/2175988928.html"/>
    <url>/blog/2175988928.html</url>
    
    <content type="html"><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><p> 输出实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span><br>hello world<br></code></pre></td></tr></table></figure><p>输入实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name = raw_input();<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello,&quot;</span>,name<br><br>world<br>hello,world<br></code></pre></td></tr></table></figure><p>输入时提示实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name = raw_input(<span class="hljs-string">&#x27;please enter your name:&#x27;</span>);<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello,&quot;</span>,name<br><br>please enter your name:world<br>hello,world<br></code></pre></td></tr></table></figure><p>raw_input 函数读入的是字符串，如果想要转换成 int 类型，就要用到 int 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">birth = <span class="hljs-built_in">int</span>(raw_input(<span class="hljs-string">&#x27;birth: &#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="字符表示"><a href="#字符表示" class="headerlink" title="字符表示"></a>字符表示</h1><p>十进制正常表示，十六进制最前面加 0x，小数正常表示，科学计数法表示 1.23x109 就是 1.23e9，或者 12.3e8 转义符 \ 转义符实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;\\\n\\&#x27;</span><br>\<br>\<br></code></pre></td></tr></table></figure><p>防止转义，可以在前面加入 r</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;\\\t\\&#x27;</span><br>\       \<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">r&#x27;\\\t\\&#x27;</span><br>\\\t\\<br></code></pre></td></tr></table></figure><p>多行内容表示，用三引号包括</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;&#x27;line1</span><br><span class="hljs-string">line2</span><br><span class="hljs-string">line3&#x27;&#x27;&#x27;</span><br>line1<br>line2<br>line3<br></code></pre></td></tr></table></figure><p>布尔值的表示 True 和 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>空值 None，相当于 Java，C 中的 null</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;&gt;&gt;<span class="hljs-built_in">print</span> <span class="hljs-attribute">None</span>==None<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>Unicode 表示的字符串用 u’…’ 表示，转化成 UTF-8 编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">u&#x27;ABC&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-string">&#x27;ABC&#x27;</span><br><span class="hljs-string">u&#x27;中文&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-string">&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>文本文件编码</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!/usr/bin/env python</span><br># -*- coding: utf-<span class="hljs-number">8</span> -*-<br></code></pre></td></tr></table></figure><h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><p>格式化输出实例</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;&gt;&gt; <span class="hljs-string">&#x27;Hello, %s&#x27;</span> <span class="hljs-meta">%</span> <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-string">&#x27;Hello, world&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;Hi, %s, you have $%d.&#x27;</span> <span class="hljs-meta">%</span> <span class="hljs-comment">(&#x27;Michael&#x27;, 1000000)</span><br><span class="hljs-string">&#x27;Hi, Michael, you have $1000000.&#x27;</span><br></code></pre></td></tr></table></figure><p>格式化整数和小数</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;&gt;&gt; <span class="hljs-string">&#x27;%2d-%02d&#x27;</span> <span class="hljs-meta">%</span> <span class="hljs-comment">(3, 1)</span><br><span class="hljs-string">&#x27; 3-01&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;%.2f&#x27;</span> <span class="hljs-meta">%</span> <span class="hljs-number">3.1415926</span><br><span class="hljs-string">&#x27;3.14&#x27;</span><br></code></pre></td></tr></table></figure><p>万能格式化 %s，可以代替所有格式化 对于Unicode字符串，用法完全一样，但最好确保替换的字符串也是Unicode字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">u&#x27;Hi, %s&#x27;</span> % <span class="hljs-string">u&#x27;Michael&#x27;</span><br><span class="hljs-string">u&#x27;Hi, Michael&#x27;</span><br></code></pre></td></tr></table></figure><p>输出百分号 %，用双 % 即可</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">&gt;&gt;&gt; <span class="hljs-string">&#x27;growth rate: %d %%&#x27;</span> <span class="hljs-comment">% 7</span><br><span class="hljs-string">&#x27;growth rate: 7 %&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h1><p>列表 list ，可变的有序表</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&gt;&gt;&gt; classmates = [<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>]<br>&gt;&gt;&gt; classmates<br>[<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>]<br></code></pre></td></tr></table></figure><p>len函数获取它的长度</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">len</span>(classmates)</span><br>3<br></code></pre></td></tr></table></figure><p>取得某个元素，可以用中括号索引</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[<span class="hljs-number">0</span>]</span><br>&#x27;Michael&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[<span class="hljs-number">1</span>]</span><br>&#x27;Bob&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[<span class="hljs-number">2</span>]</span><br>&#x27;Tracy&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[<span class="hljs-number">3</span>]</span><br>Traceback (most recent call last):<br></code></pre></td></tr></table></figure><p>倒数索引</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[-<span class="hljs-number">1</span>]</span><br>&#x27;Tracy&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[-<span class="hljs-number">2</span>]</span><br>&#x27;Bob&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[-<span class="hljs-number">3</span>]</span><br>&#x27;Michael&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates[-<span class="hljs-number">4</span>]</span><br>Traceback (most recent call last):<br></code></pre></td></tr></table></figure><p>append 追加元素到末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.append(<span class="hljs-string">&#x27;Adam&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>classmates<br>[<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>, <span class="hljs-string">&#x27;Adam&#x27;</span>]<br></code></pre></td></tr></table></figure><p>insert 插入到指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>classmates<br>[<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>, <span class="hljs-string">&#x27;Adam&#x27;</span>]<br></code></pre></td></tr></table></figure><p>pop 删除末尾元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.pop()<br><span class="hljs-string">&#x27;Adam&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>classmates<br>[<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>]<br></code></pre></td></tr></table></figure><p>pop 加入参数删除指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>classmates.pop(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;Jack&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>classmates<br>[<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>]<br></code></pre></td></tr></table></figure><p>元素改变，直接赋值即可</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&gt;&gt;&gt; classmates[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Sarah&#x27;</span><br>&gt;&gt;&gt; classmates<br>[<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Sarah&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>]<br></code></pre></td></tr></table></figure><p>list可以嵌套，可用二维索引</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&gt;&gt;&gt; s = [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, [<span class="hljs-string">&#x27;asp&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>], <span class="hljs-string">&#x27;scheme&#x27;</span>]<br>&gt;&gt;&gt; s[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]<br>php<br></code></pre></td></tr></table></figure><p>空列表</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">L = []</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">len</span>(L)</span><br>0<br></code></pre></td></tr></table></figure><p>元组 tuple<br>不可变有序的数组 定义元组</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&gt;&gt;&gt; classmates = (&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;)<br>&gt;&gt;&gt; classmates<br>(&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;)<br></code></pre></td></tr></table></figure><p>空的元组</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates = ()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">classmates </span><br>()<br></code></pre></td></tr></table></figure><p>一个元素的元组</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&gt;&gt;&gt; <span class="hljs-literal">t</span> = (<span class="hljs-number">1</span>,)<br>&gt;&gt;&gt; <span class="hljs-literal">t</span><br>(<span class="hljs-number">1</span>,)<br></code></pre></td></tr></table></figure><p>注意不能用 t &#x3D; (1) 来定义， 因为它定义的不是tuple，是 1 这个数，这是因为括号既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。 表面上可变的tuple</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&gt;&gt;&gt; t = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])<br>&gt;&gt;&gt; t[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;X&#x27;</span><br>&gt;&gt;&gt; t[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Y&#x27;</span><br>&gt;&gt;&gt; t<br>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, [<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>])<br></code></pre></td></tr></table></figure><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向 ‘a’，就不能改成指向 ‘b’ ，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><h1 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h1><p>字典 dict 即键值对组，dict的key必须是不可变对象。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d = &#123;<span class="hljs-string">&#x27;Michael&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>: <span class="hljs-number">85</span>&#125;</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d[<span class="hljs-string">&#x27;Michael&#x27;</span>]</span><br>95<br></code></pre></td></tr></table></figure><p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入，在这之前，d 必须被声明，否则会报错</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d[<span class="hljs-string">&#x27;Adam&#x27;</span>] = <span class="hljs-number">67</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">d[<span class="hljs-string">&#x27;Adam&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p>判断key是否在字典中 1. in 判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Thomas&#x27;</span> <span class="hljs-keyword">in</span> d<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;&gt;&gt; <span class="hljs-built_in">print</span> d.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;Thomas&#x27;</span>)<br>None<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span> d.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;Thomas&#x27;</span>, -1)<br>-1<br></code></pre></td></tr></table></figure>要删除一个key，用 pop(key) 方法，对应的value也会从dict中删除<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d.pop(<span class="hljs-string">&#x27;Bob&#x27;</span>)<br><span class="hljs-number">75</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-string">&#x27;Michael&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>: <span class="hljs-number">85</span>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h1><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。 要创建一个set，需要提供一个list作为输入集合：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span><br>set([1, 2, 3])<br></code></pre></td></tr></table></figure><p>重复元素在set中自动被过滤：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>])</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span><br>set([1, 2, 3])<br></code></pre></td></tr></table></figure><p>通过 add(key) 方法可以添加元素到set中，可以重复添加，但不会有效果：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.add(<span class="hljs-number">4</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span><br>set([1, 2, 3, 4])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.add(<span class="hljs-number">4</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span><br>set([1, 2, 3, 4])<br></code></pre></td></tr></table></figure><p>通过 remove(key) 方法可以删除元素：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.remove(<span class="hljs-number">4</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span><br>set([1, 2, 3])<br></code></pre></td></tr></table></figure><p>判断元素是否在set中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> <span class="hljs-keyword">in</span> s <br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s1 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s1 &amp; s2</span><br>set([2, 3])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s1 | s2</span><br>set([1, 2, 3, 4])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scrapy库使用</title>
    <link href="/blog/96864191.html"/>
    <url>/blog/96864191.html</url>
    
    <content type="html"><![CDATA[<h1 id="scrapy-安装"><a href="#scrapy-安装" class="headerlink" title="scrapy 安装"></a>scrapy 安装</h1><h2 id="1-安装-Python"><a href="#1-安装-Python" class="headerlink" title="1. 安装 Python"></a>1. 安装 Python</h2><blockquote><p>sudo apt-get install python2.7 python2.7-dev</p></blockquote><h2 id="2-安装-pip"><a href="#2-安装-pip" class="headerlink" title="2. 安装 pip"></a>2. 安装 pip</h2><blockquote><p>sudo python get-pip.py</p></blockquote><h2 id="3-安装-Scrapy"><a href="#3-安装-Scrapy" class="headerlink" title="3. 安装 Scrapy"></a>3. 安装 Scrapy</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo pip <span class="hljs-keyword">install</span> lxml<br>sudo pip <span class="hljs-keyword">install</span> Scrapy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scrapy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite</title>
    <link href="/blog/1587411414.html"/>
    <url>/blog/1587411414.html</url>
    
    <content type="html"><![CDATA[<p>Vite是一个快速、现代、轻量级的前端开发构建工具，它旨在提高开发者的开发效率。以下是一个简单的介绍和使用Vite的示例：</p><p><strong>安装Vite：</strong></p><p>首先，确保你已经全局安装了Node.js和npm（或yarn）。然后，你可以使用以下命令全局安装Vite：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g create-vite<br></code></pre></td></tr></table></figure><p><strong>创建新项目：</strong></p><p>使用Vite创建一个新的项目非常简单。在终端中进入你想要创建项目的目录，然后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">create-vite my-vite-app<br></code></pre></td></tr></table></figure><p>这将创建一个名为<code>my-vite-app</code>的新项目目录，并自动安装所需的依赖项。</p><p><strong>进入项目目录：</strong></p><p>进入新创建的项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my-vite-app<br></code></pre></td></tr></table></figure><p><strong>开发模式：</strong></p><p>在开发模式下运行项目，它将启动一个本地开发服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><p>或者使用yarn：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn dev<br></code></pre></td></tr></table></figure><p>默认情况下，Vite将在<code>localhost:3000</code>上启动开发服务器，并使用热模块替换（HMR）来实时更新你的代码。</p><p><strong>构建项目：</strong></p><p>当你准备好部署项目时，可以使用以下命令构建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure><p>或者使用yarn：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn build<br></code></pre></td></tr></table></figure><p>构建后的文件将位于项目根目录下的<code>dist</code>文件夹中。</p><p><strong>自定义配置：</strong></p><p>Vite允许你自定义配置。项目根目录中有一个<code>vite.config.js</code>文件，你可以在其中配置构建选项、插件、别名等。例如，你可以添加Vue.js支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vite.config.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title class_">Vue</span>()],<br>&#125;;<br></code></pre></td></tr></table></figure><p>这只是一个简单的Vite入门示例。Vite还支持React、TypeScript、CSS预处理器等，并且具有出色的性能和开发体验。你可以根据项目需求进一步探索和定制Vite的功能。</p>]]></content>
    
    
    <categories>
      
      <category>前端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/blog/2152630135.html"/>
    <url>/blog/2152630135.html</url>
    
    <content type="html"><![CDATA[<p>Webpack 是一个强大的 JavaScript 模块打包工具，用于构建现代前端应用程序。以下是 Webpack 的一些关键要点和使用要点：</p><ol><li><p><strong>安装 Webpack：</strong> 首先，确保你已经全局安装了 Node.js 和 npm（或 yarn）。然后，在你的项目中安装 Webpack 和 Webpack CLI（命令行工具）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack webpack-cli --save-dev<br></code></pre></td></tr></table></figure></li><li><p><strong>Webpack 配置文件：</strong> 创建一个 Webpack 配置文件（通常命名为<code>webpack.config.js</code>），其中包含有关如何构建项目的配置。配置文件包括入口文件、输出文件、加载器、插件等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>入口文件：</strong> 在 Webpack 配置中指定应用程序的入口文件，通常是项目的主 JavaScript 文件。</p></li><li><p><strong>输出文件：</strong> 指定 Webpack 构建后生成的输出文件的名称和路径。</p></li><li><p><strong>加载器（Loaders）：</strong> 使用加载器来处理非 JavaScript 文件，例如 CSS、图片和字体文件。加载器将这些文件转换为模块，以便可以在 JavaScript 中导入它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在Webpack配置中配置CSS加载器</span><br><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>      <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>插件（Plugins）：</strong> 使用插件来执行各种构建任务，例如代码分离、压缩、代码优化等。常见的插件包括<code>HtmlWebpackPlugin</code>、<code>MiniCssExtractPlugin</code>等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在Webpack配置中配置HtmlWebpackPlugin插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;index.html&quot;</span>,<br>  &#125;),<br>];<br></code></pre></td></tr></table></figure></li><li><p><strong>模式（Mode）：</strong> 使用 Webpack 的模式选项（development、production、none）来指定构建模式，以便 Webpack 可以进行相应的优化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在Webpack配置中指定构建模式</span><br><span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br></code></pre></td></tr></table></figure></li><li><p><strong>热模块替换（HMR）：</strong> 在开发模式下启用 HMR，以实时更新应用程序的部分而不必重新加载整个页面。</p></li><li><p><strong>多入口和代码分离：</strong> 可以配置多个入口文件，并使用 Webpack 的代码分离功能将代码拆分为多个文件，以优化加载性能。</p></li><li><p><strong>处理静态资源：</strong> 使用 Webpack 加载器和插件来处理静态资源，例如图片、字体、SVG 等。</p></li><li><p><strong>配置别名（Alias）：</strong> 可以配置别名，使导入模块更方便，也可以减少路径的复杂性。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在Webpack配置中配置模块别名</span><br><span class="hljs-attr">resolve</span>: &#123;<br>  <span class="hljs-attr">alias</span>: &#123;<br>    <span class="hljs-string">&#x27;@&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ol start="12"><li><strong>自定义 Webpack 配置：</strong> 根据项目需求，你可以自定义 Webpack 配置，以适应特定的开发场景和要求。</li></ol>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型链</title>
    <link href="/blog/200855344.html"/>
    <url>/blog/200855344.html</url>
    
    <content type="html"><![CDATA[<p>JavaScript中的原型链是一种对象之间继承关系的表示方式，它基于原型（prototype）和原型对象（prototype object）的概念。每个JavaScript对象都有一个原型对象，它可以包含属性和方法，这些属性和方法可以被对象本身访问和继承。</p><p>以下是关于JavaScript原型链的一些关键概念：</p><ol><li><p><strong>构造函数和原型对象</strong>：</p><ul><li>在JavaScript中，通常通过构造函数来创建对象。构造函数本身也是一个函数，可以创建多个具有相同属性和方法的对象。</li><li>构造函数有一个原型对象，通常称为 <code>prototype</code>。该原型对象包含了对象实例可以继承的属性和方法。</li></ul></li><li><p><strong>对象实例和原型对象之间的关系</strong>：</p><ul><li>对象实例是由构造函数创建的，它们可以访问构造函数的原型对象上的属性和方法。</li><li>如果对象实例上没有找到某个属性或方法，JavaScript引擎会继续查找该对象的原型对象，以及原型对象的原型对象，依此类推，直到找到或者达到原型链的顶端为止。</li></ul></li><li><p><strong>原型链</strong>：</p><ul><li>原型链是一种对象之间的继承链条，由原型对象构成。当一个对象需要访问属性或方法时，它会首先在自己的属性中查找，如果没有找到，就会继续在原型对象中查找，然后在原型对象的原型对象中查找，以此类推，直到找到或者达到原型链的顶端。</li><li>原型链的终点是 <code>Object.prototype</code>，它是JavaScript中所有对象的顶层原型对象。</li></ul></li></ol><p>以下是一个简单的示例，演示了JavaScript原型链的基本用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-comment">// 在构造函数的原型对象上添加方法</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-comment">// 创建对象实例</span><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>);<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Bob&quot;</span>);<br><br><span class="hljs-comment">// 调用对象实例的方法</span><br>person1.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// 输出: Hello, my name is Alice</span><br>person2.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// 输出: Hello, my name is Bob</span><br><br><span class="hljs-comment">// 对象实例继承原型对象的方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;sayHello&quot;</span>)); <span class="hljs-comment">// 输出: false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">__proto__</span>.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;sayHello&quot;</span>)); <span class="hljs-comment">// 输出: true</span><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>Person</code> 构造函数有一个原型对象 <code>Person.prototype</code>，该原型对象包含 <code>sayHello</code> 方法。通过 <code>person1</code> 和 <code>person2</code> 对象实例，我们可以调用 <code>sayHello</code> 方法，因为它们继承自 <code>Person.prototype</code>。同时，我们可以看到 <code>hasOwnProperty</code> 方法只在对象实例上返回 <code>true</code>，而不会在原型链上返回 <code>true</code>，这说明了原型链的工作原理。</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端测试</title>
    <link href="/blog/2152630135.html"/>
    <url>/blog/2152630135.html</url>
    
    <content type="html"><![CDATA[<p>前端测试是一种确保前端应用程序正常工作的关键实践，它有助于发现和修复潜在的错误和问题。以下是一些常见的前端测试类型和工具：</p><ol><li><p><strong>单元测试（Unit Testing）</strong>：</p><ul><li>单元测试是测试应用程序中的最小单元，通常是函数或组件。它们用于确保单个函数或组件的功能是正确的。</li><li>常用的单元测试框架包括Jest、Mocha、Jasmine等。</li></ul></li><li><p><strong>集成测试（Integration Testing）</strong>：</p><ul><li>集成测试用于测试多个组件、模块或服务之间的交互，以确保它们协同工作正常。</li><li>Cypress、Puppeteer等工具可用于进行集成测试。</li></ul></li><li><p><strong>端到端测试（End-to-End Testing）</strong>：</p><ul><li>端到端测试模拟真实用户在应用程序中的交互，以确保应用程序在整体上正常运行。</li><li>工具如Selenium、Cypress和Puppeteer可用于执行端到端测试。</li></ul></li><li><p><strong>UI测试</strong>：</p><ul><li>UI测试是一种测试用户界面的方法，以确保UI元素和用户交互行为正常。</li><li>使用工具如React Testing Library、Enzyme等来测试React应用的UI。</li></ul></li><li><p><strong>快照测试（Snapshot Testing）</strong>：</p><ul><li>快照测试用于捕获组件或页面的渲染快照，并在后续更改时检测差异。</li><li>Jest提供了快照测试的支持。</li></ul></li><li><p><strong>性能测试（Performance Testing）</strong>：</p><ul><li>性能测试用于评估应用程序的性能和响应时间，以确保它们满足性能要求。</li><li>工具如Lighthouse、WebPageTest等可用于性能测试。</li></ul></li><li><p><strong>覆盖率测试（Code Coverage Testing）</strong>：</p><ul><li>覆盖率测试测量代码的测试覆盖率，以确定代码中哪些部分已经被测试。</li><li>工具如Istanbul用于生成测试覆盖率报告。</li></ul></li><li><p><strong>可访问性测试（Accessibility Testing）</strong>：</p><ul><li>可访问性测试用于确保应用程序对于残障用户是可访问的。</li><li>使用工具如axe-core、pa11y等来执行可访问性测试。</li></ul></li><li><p><strong>跨浏览器测试（Cross-Browser Testing）</strong>：</p><ul><li>跨浏览器测试确保应用程序在不同的浏览器中都能够正常工作。</li><li>工具如Selenium、BrowserStack等可用于跨浏览器测试。</li></ul></li><li><p><strong>跨平台测试（Cross-Platform Testing）</strong>：</p><ul><li>跨平台测试用于确保应用程序在不同的操作系统和设备上都能够正常运行。</li><li>使用模拟器、真机测试和云测试服务进行跨平台测试。</li></ul></li><li><p><strong>自动化测试（Automation Testing）</strong>：</p><ul><li>自动化测试是使用脚本和工具自动执行测试用例的方式，以提高测试效率。</li><li>自动化测试框架如WebDriver、TestCafe、Cypress等可用于自动化测试。</li></ul></li></ol><p>在实际项目中，通常会结合多种测试类型来确保前端应用程序的质量和稳定性。选择适合项目需求的测试工具和方法是关键，同时还需要定期运行和维护测试套件以确保应用程序的持续质量。</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨平台应用</title>
    <link href="/blog/4181456602.html"/>
    <url>/blog/4181456602.html</url>
    
    <content type="html"><![CDATA[<p>UniApp、Flutter和React Native都是跨平台移动应用开发框架，它们各有特点，适用于不同的开发场景和需求。</p><ol><li><p>UniApp：</p><ul><li>UniApp是基于Vue.js的跨平台应用开发框架，使用Vue.js语法编写应用。</li><li>UniApp支持将应用打包成原生应用（iOS和Android）、H5应用以及各种小程序平台（如微信小程序、支付宝小程序等）。</li><li>UniApp具有较低的学习曲线，适合熟悉Vue.js的开发者。</li><li>适用于需要快速开发小程序和跨平台移动应用的项目。</li></ul></li><li><p>Flutter：</p><ul><li>Flutter由Google开发，使用Dart编程语言，具有自己的渲染引擎。</li><li>Flutter提供了高性能的原生应用体验，支持自定义UI组件，可创建漂亮的用户界面。</li><li>Flutter生态系统丰富，有大量的第三方库和插件，适合构建复杂的移动应用。</li><li>适用于注重性能和自定义UI的项目。</li></ul></li><li><p>React Native：</p><ul><li>React Native是由Facebook开发，使用JavaScript和React框架编写应用。</li><li>React Native具有庞大的社区支持和丰富的第三方库，可以加速开发。</li><li>它允许开发者共享大部分代码，同时生成原生应用。</li><li>适用于需要快速迭代和跨平台开发的项目，特别是对React技术栈熟悉的开发者。</li></ul></li></ol><p>选择框架应根据项目需求、团队技能和资源来决定。UniApp适合快速开发小程序和跨平台应用，Flutter注重性能和自定义UI，React Native具有广泛的社区和生态系统，可以快速构建应用。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniapp</tag>
      
      <tag>flutter</tag>
      
      <tag>reactnative</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript设计模式</title>
    <link href="/blog/911124684.html"/>
    <url>/blog/911124684.html</url>
    
    <content type="html"><![CDATA[<h1 id="7-种常见的-javascript-设计模式"><a href="#7-种常见的-javascript-设计模式" class="headerlink" title="7 种常见的 javascript 设计模式"></a>7 种常见的 javascript 设计模式</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>JavaScript 中的工厂模式是一种创建对象的设计模式，它通过一个工厂函数或方法来创建和返回对象，而不是直接使用构造函数或类。工厂模式允许你封装对象的创建过程，并可以根据需要创建不同类型的对象实例。以下是一个简单的示例来说明 JavaScript 中的工厂模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个工厂函数来创建不同类型的汽车对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCar</span>(<span class="hljs-params">make, model</span>) &#123;<br>  <span class="hljs-comment">// 创建一个空对象</span><br>  <span class="hljs-keyword">var</span> car = &#123;&#125;;<br><br>  <span class="hljs-comment">// 添加属性和方法到对象</span><br>  car.<span class="hljs-property">make</span> = make;<br>  car.<span class="hljs-property">model</span> = model;<br>  car.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Starting the <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.make&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model&#125;</span>`</span>);<br>  &#125;;<br><br>  <span class="hljs-comment">// 返回创建的对象</span><br>  <span class="hljs-keyword">return</span> car;<br>&#125;<br><br><span class="hljs-comment">// 使用工厂函数创建不同的汽车对象</span><br><span class="hljs-keyword">var</span> car1 = <span class="hljs-title function_">createCar</span>(<span class="hljs-string">&quot;Toyota&quot;</span>, <span class="hljs-string">&quot;Camry&quot;</span>);<br><span class="hljs-keyword">var</span> car2 = <span class="hljs-title function_">createCar</span>(<span class="hljs-string">&quot;Honda&quot;</span>, <span class="hljs-string">&quot;Civic&quot;</span>);<br><br><span class="hljs-comment">// 调用对象的方法</span><br>car1.<span class="hljs-title function_">start</span>(); <span class="hljs-comment">// 输出: Starting the Toyota Camry</span><br>car2.<span class="hljs-title function_">start</span>(); <span class="hljs-comment">// 输出: Starting the Honda Civic</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，createCar 函数是一个工厂函数，它接受参数 make 和 model，并返回一个新的汽车对象。每次调用 createCar 函数时，都会创建一个新的汽车对象，并可以为每个对象设置不同的属性值。这种方式使你可以轻松地创建多个相似类型的对象，而无需直接使用构造函数或类。</p><p>工厂模式在需要创建多个相似对象实例的情况下非常有用，它可以帮助你更好地组织和封装对象的创建逻辑。然后，你可以根据需要扩展工厂函数以创建不同类型的对象。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>JavaScript 中的单例模式是一种设计模式，它确保一个类只有一个实例，并提供一个全局访问点来访问该实例。这可以用于限制特定类型的对象只有一个全局实例，以确保在整个应用程序中共享相同的状态和行为。以下是一个简单的示例来说明 JavaScript 中的单例模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个单例对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Singleton</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 私有变量，只能在闭包内访问</span><br>  <span class="hljs-keyword">var</span> instance;<br><br>  <span class="hljs-comment">// 构造函数，创建单例实例</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">SingletonClass</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 添加属性或方法到实例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">property1</span> = <span class="hljs-string">&quot;Singleton Property&quot;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">method1</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Singleton Method&quot;</span>);<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 返回单例实例的方法</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">getInstance</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (!instance) &#123;<br>        <span class="hljs-comment">// 如果实例不存在，则创建一个新实例</span><br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonClass</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> instance;<br>    &#125;,<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-comment">// 使用单例模式创建对象</span><br><span class="hljs-keyword">var</span> singleton1 = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>();<br><span class="hljs-keyword">var</span> singleton2 = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>();<br><br><span class="hljs-comment">// 验证两个实例是否相同</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(singleton1 === singleton2); <span class="hljs-comment">// 输出: true</span><br><br><span class="hljs-comment">// 访问单例对象的属性和方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(singleton1.<span class="hljs-property">property1</span>); <span class="hljs-comment">// 输出: Singleton Property</span><br>singleton1.<span class="hljs-title function_">method1</span>(); <span class="hljs-comment">// 输出: Singleton Method</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，我们通过一个立即执行函数（IIFE）创建了一个闭包，其中包含一个私有变量 <code>instance</code> 和一个构造函数 <code>SingletonClass</code>。<code>getInstance</code> 方法用于获取单例实例，如果实例不存在，则创建一个新实例，否则返回现有的实例。</p><p>使用单例模式可以确保在应用程序中只有一个全局实例，这对于管理共享状态和避免不必要的实例化非常有用。请注意，JavaScript 中的单例模式可以通过不同的实现方式来实现，上面的示例是其中一种常见的方式。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern）是一种设计模式，用于解决不同接口或对象之间的兼容性问题。它允许一个对象（适配器）将其接口转换为另一个对象所期望的接口，从而使两者可以一起工作。适配器模式通常用于以下情况：</p><ol><li><p><strong>集成现有代码</strong>：当你需要使用一个已经存在的类，但其接口与你的需求不匹配时，可以创建一个适配器来使其与你的代码协同工作。</p></li><li><p><strong>与第三方库集成</strong>：当你需要与一个外部库或服务进行交互，但其接口与你的应用程序不兼容时，可以使用适配器来将两者连接起来。</p></li></ol><p>以下是一个简单的 JavaScript 适配器模式的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 假设有一个旧的类，它有不兼容的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OldService</span> &#123;<br>  <span class="hljs-title function_">request</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Old Service: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建一个适配器，将旧的接口适配成新的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oldService</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OldService</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">newRequest</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Adapter is converting the request...&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oldService</span>.<span class="hljs-title function_">request</span>(data);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用适配器来调用旧的服务</span><br><span class="hljs-keyword">const</span> adapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adapter</span>();<br>adapter.<span class="hljs-title function_">newRequest</span>(<span class="hljs-string">&quot;Adapter Pattern Demo&quot;</span>);<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>OldService</code> 是一个具有旧接口的类，而 <code>Adapter</code> 是一个适配器类，它将旧的接口适配成新的接口。通过适配器，我们可以使用 <code>newRequest</code> 方法来调用旧的服务，并在适配器中进行必要的转换。</p><p>适配器模式允许你在不修改现有代码的情况下，与不同接口的对象进行交互，提高了代码的可扩展性和复用性。这对于在多个组件之间集成和协同工作时非常有用，特别是在大型应用程序中。</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器模式（Decorator Pattern）是一种结构性设计模式，用于动态地给对象添加新的行为或功能，而不需要修改其原始类。这种模式允许你通过将对象包装在装饰器类中来扩展其功能，从而实现透明地添加功能。在 JavaScript 中，装饰器模式通常使用函数或类来实现。</p><p>以下是一个简单的 JavaScript 装饰器模式的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原始组件类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> &#123;<br>  <span class="hljs-title function_">cost</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 装饰器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MilkDecorator</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">coffee</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">coffee</span> = coffee;<br>  &#125;<br><br>  <span class="hljs-title function_">cost</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">coffee</span>.<span class="hljs-title function_">cost</span>() + <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SugarDecorator</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">coffee</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">coffee</span> = coffee;<br>  &#125;<br><br>  <span class="hljs-title function_">cost</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">coffee</span>.<span class="hljs-title function_">cost</span>() + <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用装饰器来扩展原始组件</span><br><span class="hljs-keyword">const</span> coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Cost of Coffee: $<span class="hljs-subst">$&#123;coffee.cost()&#125;</span>`</span>);<br><br><span class="hljs-keyword">const</span> coffeeWithMilk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MilkDecorator</span>(coffee);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Cost of Coffee with Milk: $<span class="hljs-subst">$&#123;coffeeWithMilk.cost()&#125;</span>`</span>);<br><br><span class="hljs-keyword">const</span> coffeeWithMilkAndSugar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarDecorator</span>(coffeeWithMilk);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-string">`Cost of Coffee with Milk and Sugar: $<span class="hljs-subst">$&#123;coffeeWithMilkAndSugar.cost()&#125;</span>`</span><br>);<br></code></pre></td></tr></table></figure><p>在上面的示例中，有一个原始的 <code>Coffee</code> 类，它表示一杯咖啡。然后有两个装饰器类 <code>MilkDecorator</code> 和 <code>SugarDecorator</code>，它们分别用于在咖啡上添加牛奶和糖的功能。通过创建装饰器对象并嵌套它们，可以透明地扩展原始组件的功能，而不需要修改原始组件类。</p><p>装饰器模式在不破坏现有代码结构的情况下，允许你动态地组合对象的功能。这在创建可复用的组件和在运行时添加或删除功能时非常有用。在 JavaScript 中，装饰器模式通常与类和原型继承一起使用。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式（Proxy Pattern）是一种结构性设计模式，它充当另一个对象的接口，以控制对该对象的访问。代理对象通常用于在访问实际对象之前或之后执行一些附加操作，例如延迟加载、访问控制、缓存等。在 JavaScript 中，代理模式可以使用对象或函数来实现。</p><p>以下是一个简单的 JavaScript 代理模式的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原始对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealImage</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">filename</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">filename</span> = filename;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadImage</span>();<br>    &#125;<br><br>    <span class="hljs-title function_">loadImage</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Loading image: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.filename&#125;</span>`</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Displaying image: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.filename&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageProxy</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">filename</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">filename</span> = filename;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">realImage</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">realImage</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">realImage</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealImage</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">filename</span>);<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">realImage</span>.<span class="hljs-title function_">display</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用代理对象来控制访问原始对象</span><br><span class="hljs-keyword">const</span> image1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageProxy</span>(<span class="hljs-string">&quot;image1.jpg&quot;</span>);<br><span class="hljs-keyword">const</span> image2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageProxy</span>(<span class="hljs-string">&quot;image2.jpg&quot;</span>);<br><br><span class="hljs-comment">// 实际调用会延迟加载原始对象</span><br>image1.<span class="hljs-title function_">display</span>(); <span class="hljs-comment">// 加载并显示 &quot;image1.jpg&quot;</span><br>image2.<span class="hljs-title function_">display</span>(); <span class="hljs-comment">// 加载并显示 &quot;image2.jpg&quot;</span><br>image1.<span class="hljs-title function_">display</span>(); <span class="hljs-comment">// 直接显示 &quot;image1.jpg&quot;（已经加载过）</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>RealImage</code> 是原始对象，代表加载和显示图像的功能。<code>ImageProxy</code> 是代理对象，它控制对实际图像的访问。当第一次调用代理对象的 <code>display</code> 方法时，它会延迟加载实际图像对象，并在加载完成后调用实际图像的 <code>display</code> 方法。在后续的调用中，代理对象会直接调用实际图像的 <code>display</code> 方法，因为图像已经加载过了。</p><p>代理模式在需要在访问实际对象之前或之后执行某些操作时非常有用，例如延迟加载、权限控制、缓存等。它可以帮助你实现更加灵活和可维护</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式（Observer Pattern）是一种行为型设计模式，用于创建一种对象（称为主题或被观察者），它维护一组依赖于它的对象（称为观察者）的列表，当主题的状态发生变化时，会自动通知并更新所有的观察者。观察者模式是一种发布-订阅模式，用于实现对象之间的松耦合通信。</p><p>在 JavaScript 中，观察者模式常常用于以下情况：</p><ol><li>当一个对象的状态改变需要通知其他对象，但你不知道这些对象是谁时。</li><li>当一个对象需要将自己的改变通知给多个对象，而不需要知道这些对象是谁时。</li><li>当一个对象需要与其他对象解耦，以便独立进行开发和维护时。</li></ol><p>以下是一个简单的 JavaScript 观察者模式的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 主题（被观察者）类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = []; <span class="hljs-comment">// 观察者列表</span><br>    &#125;<br><br>    <span class="hljs-comment">// 添加观察者</span><br>    <span class="hljs-title function_">addObserver</span>(<span class="hljs-params">observer</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">push</span>(observer);<br>    &#125;<br><br>    <span class="hljs-comment">// 移除观察者</span><br>    <span class="hljs-title function_">removeObserver</span>(<span class="hljs-params">observer</span>) &#123;<br>        <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">indexOf</span>(observer);<br>        <span class="hljs-keyword">if</span> (index !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 通知所有观察者</span><br>    <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> observer <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>) &#123;<br>            observer.<span class="hljs-title function_">update</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 观察者的更新方法</span><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> 收到通知并更新了。`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建主题对象</span><br><span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br><br><span class="hljs-comment">// 创建观察者对象</span><br><span class="hljs-keyword">const</span> observer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&quot;观察者1&quot;</span>);<br><span class="hljs-keyword">const</span> observer2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&quot;观察者2&quot;</span>);<br><br><span class="hljs-comment">// 添加观察者到主题</span><br>subject.<span class="hljs-title function_">addObserver</span>(observer1);<br>subject.<span class="hljs-title function_">addObserver</span>(observer2);<br><br><span class="hljs-comment">// 主题发出通知，所有观察者会更新</span><br>subject.<span class="hljs-title function_">notify</span>();<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>Subject</code> 是主题类，它维护了一个观察者列表，并提供了添加、移除和通知观察者的方法。<code>Observer</code> 是观察者类，它具有一个 <code>update</code> 方法，用于在主题发出通知时执行更新操作。</p><p>观察者模式使得对象之间可以松散耦合，主题和观察者之间没有直接的依赖关系，可以随时添加或移除观察者。这种模式在实现事件处理、UI组件、数据绑定等方面都非常有用。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器模式（Iterator Pattern）是一种行为型设计模式，用于提供一种方法来访问一个聚合对象（如数组、集合、列表等），而不需要暴露该对象的内部表示。它把访问集合中的元素的责任委托给一个迭代器对象，使得我们可以在不了解集合内部结构的情况下逐个访问元素。</p><p>在 JavaScript 中，迭代器模式通常使用对象或函数来实现。ES6 中引入了内置的迭代器协议，使得创建自定义迭代器变得更加容易。</p><p>以下是一个简单的 JavaScript 迭代器模式的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 自定义迭代器对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>    &#125;<br><br>    <span class="hljs-comment">// 实现迭代器协议的 next 方法</span><br>    <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>++], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 集合对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCollection</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = [];<br>    &#125;<br><br>    <span class="hljs-comment">// 添加元素到集合</span><br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">item</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">push</span>(item);<br>    &#125;<br><br>    <span class="hljs-comment">// 创建并返回自定义迭代器</span><br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterator</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用自定义迭代器遍历集合</span><br><span class="hljs-keyword">const</span> collection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCollection</span>();<br>collection.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;Item 1&quot;</span>);<br>collection.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;Item 2&quot;</span>);<br>collection.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;Item 3&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> collection) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>MyIterator</code> 是自定义的迭代器对象，实现了迭代器协议的 <code>next</code> 方法。<code>MyCollection</code> 是集合对象，它实现了 ES6 中的迭代器协议，通过 <code>[Symbol.iterator]</code> 方法创建并返回一个迭代器对象。</p><p>通过使用迭代器模式，我们可以遍历集合对象的元素，而不需要知道集合内部的实际结构。这样可以提高代码的灵活性和可复用性，使得不同类型的集合都可以通过相同的方式进行迭代。迭代器模式在处理数据集合、DOM节点列表等情况下非常有用。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/blog/4184040338.html"/>
    <url>/blog/4184040338.html</url>
    
    <content type="html"><![CDATA[<h1 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h1><p>闭包（Closure）是 JavaScript 中一个重要的概念，它涉及到函数和作用域。闭包是指函数可以访问其外部函数作用域中的变量，即使外部函数已经执行完毕。这允许在内部函数中访问外部函数的变量和参数，从而创建了一种封闭的作用域。</p><p>下面是一个简单的 JavaScript 闭包示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">outerFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> outerVariable = <span class="hljs-number">10</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">innerFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(outerVariable); <span class="hljs-comment">// 内部函数访问外部函数的变量</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> innerFunction;<br>&#125;<br><br><span class="hljs-keyword">var</span> closure = <span class="hljs-title function_">outerFunction</span>();<br><span class="hljs-title function_">closure</span>(); <span class="hljs-comment">// 输出 10</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>outerFunction</code>包含了一个内部函数<code>innerFunction</code>，并返回了这个内部函数。当我们调用<code>outerFunction</code>并将其结果赋给<code>closure</code>时，实际上我们获得了一个闭包。当我们后续调用<code>closure()</code>时，它仍然可以访问<code>outerVariable</code>，即使<code>outerFunction</code>已经执行完毕。</p><p>闭包在 JavaScript 中有许多用途，例如：</p><ol><li><p><strong>封装数据</strong>: 通过闭包，可以创建私有变量，只有内部函数可以访问，从而实现数据封装。</p></li><li><p><strong>模块化</strong>: 闭包可以用于创建模块，将代码封装在闭包中，防止全局作用域的污染。</p></li><li><p><strong>回调函数</strong>: 闭包常常用于回调函数，将函数作为参数传递给其他函数，保持对外部作用域的访问。</p></li><li><p><strong>保存状态</strong>: 闭包可以用于保存函数的状态，例如计数器或计时器。</p></li></ol><p>需要注意的是，使用闭包时要小心内存泄漏问题，因为闭包会保持对外部作用域的引用，如果不小心导致引用的变量无法被垃圾回收，可能会导致内存泄漏。因此，在使用闭包时，需要谨慎管理变量的生命周期。</p><h1 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h1><p>JavaScript 闭包的生命周期与其包含的函数和外部作用域之间的关系密切相关。以下是闭包的生命周期的主要阶段：</p><p><strong>创建阶段</strong>：</p><p>闭包在函数定义时创建。<br>当内部函数引用了外部函数的变量或参数时，就会形成一个闭包。<br>闭包包含了对外部函数作用域的引用。</p><p><strong>执行阶段</strong>：</p><p>闭包在内部函数被调用时开始执行。<br>闭包可以访问其创建时包含的外部函数作用域中的变量和参数。<br>闭包可以多次执行，每次执行都可以访问相同的外部函数作用域。<br><strong>结束阶段</strong>：</p><p>闭包的生命周期取决于其是否仍然被引用。<br>如果没有任何引用指向闭包，它可以被垃圾回收，从而结束其生命周期。<br>如果闭包仍然被引用，它将保持活动状态，不会被垃圾回收，直到所有引用都被解除。<br>闭包的生命周期通常取决于其被创建的上下文和其是否在外部函数之外被引用。如果闭包在外部函数之外被传递给其他函数或存储在全局作用域中，它可能会持续存在，直到整个应用程序结束。如果闭包仅在外部函数内部使用，那么它的生命周期可能会更短，当外部函数执行完成后，闭包可能会被垃圾回收。</p><p>要注意的是，如果在闭包中引用了大量的外部变量或大型数据结构，可能会导致内存泄漏问题。因此，在使用闭包时，要小心管理变量的生命周期，确保不会意外地保持对不再需要的资源的引用。</p><h1 id="闭包的缺点及其解决办法"><a href="#闭包的缺点及其解决办法" class="headerlink" title="闭包的缺点及其解决办法"></a>闭包的缺点及其解决办法</h1><p>闭包是在 JavaScript 中非常有用的概念，但也有一些潜在的缺点，主要包括内存泄漏和性能问题。以下是闭包的一些缺点以及相应的解决办法：</p><p><strong>缺点</strong>:</p><ol><li><strong>内存泄漏</strong>：<ul><li>当闭包引用外部作用域中的变量时，这些变量不会被垃圾回收，即使它们不再需要也会保持在内存中。</li></ul></li><li><strong>性能问题</strong>：<ul><li>使用过多的闭包可能会导致性能问题，因为每个闭包都会捕获外部作用域的变量，可能导致额外的内存和计算开销。</li></ul></li></ol><p><strong>解决办法</strong>:</p><ol><li><strong>手动解除引用</strong>：<ul><li>为了避免内存泄漏，可以在不再需要闭包时手动解除对它的引用。这可以通过将变量设置为<code>null</code>来实现。</li><li>例如，当不再需要某个事件处理函数时，可以使用<code>removeEventListener</code>来解除对该函数的引用，从而释放闭包。</li></ul></li><li><strong>避免滥用闭包</strong>：<ul><li>不是每个函数都需要成为闭包。只有在确实需要访问外部作用域中的变量时才使用闭包，避免滥用它们。</li></ul></li><li><strong>使用模块模式</strong>：<ul><li>模块模式是一种将私有状态和行为封装在闭包中的方法。这样可以避免全局命名空间污染，并且不容易导致内存泄漏。</li></ul></li><li><strong>优化性能</strong>：<ul><li>如果闭包的性能成为问题，可以考虑其他优化方法，例如将函数重构为不需要闭包的形式，或者使用缓存来减少计算的次数。</li></ul></li><li><strong>使用箭头函数</strong>：<ul><li>箭头函数在创建闭包时具有更短的语法，且通常不会捕获外部作用域的<code>this</code>值，这可以减少一些潜在的问题。</li></ul></li></ol><p>总之，闭包是 JavaScript 中强大且灵活的概念，但需要谨慎使用，以避免潜在的内存泄漏和性能问题。通过手动解除引用、避免滥用闭包、使用模块模式等方法，可以更好地管理闭包的生命周期。</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
