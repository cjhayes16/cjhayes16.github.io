<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git 常用命令</title>
    <link href="/blog/1193209778.html"/>
    <url>/blog/1193209778.html</url>
    
    <content type="html"><![CDATA[<h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><h2 id="1、第一次初始化"><a href="#1、第一次初始化" class="headerlink" title="1、第一次初始化"></a>1、第一次初始化</h2><blockquote><p>git init<br>git add .<br>git commit -m ‘first commit’<br>git remote add origin <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>:帐号名&#x2F;仓库名.git<br>git pull origin master<br>git push origin master # -f 强推<br>git clone <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>:git 帐号名&#x2F;仓库名.git</p></blockquote><h2 id="2、工作基本操作"><a href="#2、工作基本操作" class="headerlink" title="2、工作基本操作"></a>2、工作基本操作</h2><blockquote><p>git checkout master 切到主分支<br>git fetch origin 获取最新变更<br>git checkout -b dev origin&#x2F;master 基于主分支创建 dev 分支<br>git add . 添加到缓存<br>git commit -m ‘xxx’ 提交到本地仓库<br>git fetch origin 获取最新变更</p></blockquote><h2 id="3、初始化仓库"><a href="#3、初始化仓库" class="headerlink" title="3、初始化仓库"></a>3、初始化仓库</h2><blockquote><p>git init</p></blockquote><h2 id="4、查看仓库当前状态"><a href="#4、查看仓库当前状态" class="headerlink" title="4、查看仓库当前状态"></a>4、查看仓库当前状态</h2><blockquote><p>git status</p></blockquote><h2 id="5、文件相关操作"><a href="#5、文件相关操作" class="headerlink" title="5、文件相关操作"></a>5、文件相关操作</h2><blockquote><p>将文件添加到仓库：</p><p>git add 文件名 将工作区的某个文件添加到暂存区<br>git add . 将当前工作区的所有文件都加入暂存区<br>git add -u 添加所有被 tracked 文件中被修改或删除的文件信息到暂存区，不处理 untracked 的文件<br>git add -A 添加所有被 tracked 文件中被修改或删除的文件信息到暂存区，包括 untracked 的文件<br>git add -i 进入交互界面模式，按需添加文件到缓存区</p></blockquote><blockquote><p>将暂存区文件提交到本地仓库：</p><p>git commit -m “提交说明” 将暂存区内容提交到本地仓库<br>git commit -a -m “提交说明” 跳过缓存区操作，直接把工作区内容提交到本地仓库</p></blockquote><blockquote><p>比较文件异同</p><p>git diff 工作区与暂存区的差异<br>git diff 分支名 工作区与某分支的差异，远程分支这样写：remotes&#x2F;origin&#x2F;分支名<br>git diff HEAD 工作区与 HEAD 指针指向的内容差异<br>git diff 提交 id 文件路径 工作区某文件当前版本与历史版本的差异<br>git diff –stage 工作区文件与上次提交的差异(1.6 版本前用 –cached)<br>git diff 版本 TAG 查看从某个版本后都改动内容<br>git diff 分支 A 分支 B 比较从分支 A 和分支 B 的差异(也支持比较两个 TAG)<br>git diff 分支 A…分支 B 比较两分支在分开后各自的改动<br>另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数</p></blockquote><h2 id="6、查看历史记录"><a href="#6、查看历史记录" class="headerlink" title="6、查看历史记录"></a>6、查看历史记录</h2><blockquote><p>git log 查看所有 commit 记录(SHA-A 校验和，作者名称，邮箱，提交时间，提交说明)<br>git log -p -次数 查看最近多少次的提交记录<br>git log –stat 简略显示每次提交的内容更改<br>git log –name-only 仅显示已修改的文件清单<br>git log –name-status 显示新增，修改，删除的文件清单<br>git log –oneline 让提交记录以精简的一行输出<br>git log –graph –all –online 图形展示分支的合并历史<br>git log –author&#x3D;作者 查询作者的提交记录(和 grep 同时使用要加一个–all–match 参数)<br>git log –grep&#x3D;过滤信息 列出提交信息中包含过滤信息的提交记录<br>git log -S 查询内容 和–grep 类似，S 和查询内容间没有空格<br>git log fileName 查看某文件的修改记录</p></blockquote><h2 id="7、代码回滚"><a href="#7、代码回滚" class="headerlink" title="7、代码回滚"></a>7、代码回滚</h2><blockquote><p>git reset HEAD^ 恢复成上次提交的版本<br>git reset HEAD^^ 恢复成上上次提交的版本，就是多个^，以此类推或用~次数<br>git reflog<br>git reset –hard 版本号<br>–soft：只是改变 HEAD 指针指向，缓存区和工作区不变；<br>–mixed：修改 HEAD 指针指向，暂存区内容丢失，工作区不变；<br>–hard：修改 HEAD 指针指向，暂存区内容丢失，工作区恢复以前状态；</p></blockquote><h2 id="8、版本库相关操作"><a href="#8、版本库相关操作" class="headerlink" title="8、版本库相关操作"></a>8、版本库相关操作</h2><blockquote><p>删除版本库文件：git rm 文件名<br>版本库里的版本替换工作区的版本：git checkout — test.txt</p></blockquote><h2 id="9、远程仓库相关操作"><a href="#9、远程仓库相关操作" class="headerlink" title="9、远程仓库相关操作"></a>9、远程仓库相关操作</h2><blockquote><p>同步远程仓库：git push -u origin master</p><p>本地仓库内容推送到远程仓库：git remote add origin <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#111;&#x6d;</a>:帐号名&#x2F;仓库名.git</p><p>从远程仓库克隆项目到本地：git clone <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:git 帐号名&#x2F;仓库名.git</p><p>查看远程库信息：git remote</p><p>拉取远程分支到本地仓库：</p><p>git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支<br>git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需 checkout<br>git branch –set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接<br>同步远程仓库更新：：git fetch origin master</p></blockquote><h2 id="10、分支相关操作"><a href="#10、分支相关操作" class="headerlink" title="10、分支相关操作"></a>10、分支相关操作</h2><blockquote><p>创建分支：git checkout -b dev -b 表示创建并切换分支<br>上面一条命令相当于一面的二条：<br>git branch dev 创建分支<br>git checkout dev 切换分支</p><p>查看分支：git branch</p><p>合并分支：</p><p>git merge dev #用于合并指定分支到当前分支<br>git merge –no-ff -m “merge with no-ff” dev #加上–no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并<br>删除分支：git branch -d dev</p><p>查看分支合并图：git log –graph –pretty&#x3D;oneline –abbrev-commit</p></blockquote><h2 id="11、git-相关配置"><a href="#11、git-相关配置" class="headerlink" title="11、git 相关配置"></a>11、git 相关配置</h2><blockquote><p>安装完 Git 后第一件要做的事，设置用户信息(global 可换成 local 在单独项目生效)：</p><p>git config –global user.name “用户名” # 设置用户名<br>git config –global user.email “用户邮箱” #设置邮箱<br>git config –global user.name # 查看用户名是否配置成功<br>git config –global user.email # 查看邮箱是否配置</p></blockquote><h2 id="12、其他查看配置相关"><a href="#12、其他查看配置相关" class="headerlink" title="12、其他查看配置相关"></a>12、其他查看配置相关</h2><blockquote><p>git config –global –list # 查看全局设置相关参数列表<br>git config –local –list # 查看本地设置相关参数列表<br>git config –system –list # 查看系统配置参数列表<br>git config –list # 查看所有 Git 的配置(全局+本地+系统)<br>git config –global color.ui true &#x2F;&#x2F;显示 git 相关颜色</p></blockquote><h2 id="13、撤消某次提交"><a href="#13、撤消某次提交" class="headerlink" title="13、撤消某次提交"></a>13、撤消某次提交</h2><blockquote><p>git revert HEAD # 撤销最近的一个提交<br>git revert 版本号 # 撤销某次 commit</p></blockquote><h2 id="14、标签"><a href="#14、标签" class="headerlink" title="14、标签"></a>14、标签</h2><blockquote><p>git tag 标签 &#x2F;&#x2F;打标签命令，默认为 HEAD<br>git tag &#x2F;&#x2F;显示所有标签<br>git tag 标签 版本号 &#x2F;&#x2F;给某个 commit 版本添加标签<br>git show 标签 &#x2F;&#x2F;显示某个标签的详细信息</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BeautifulSoup使用简介</title>
    <link href="/blog/1193209778.html"/>
    <url>/blog/1193209778.html</url>
    
    <content type="html"><![CDATA[<h1 id="Beautiful-Soup-安装"><a href="#Beautiful-Soup-安装" class="headerlink" title="Beautiful Soup 安装"></a>Beautiful Soup 安装</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">easy_install</span> beautifulsoup4<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> beautifulsoup4<br></code></pre></td></tr></table></figure><h1 id="创建-Beautiful-Soup-对象"><a href="#创建-Beautiful-Soup-对象" class="headerlink" title="创建 Beautiful Soup 对象"></a>创建 Beautiful Soup 对象</h1><p>首先必须要导入 bs4 库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="hljs-string">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>创建 beautifulsoup 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(html)<br></code></pre></td></tr></table></figure><p>另外，我们还可以用本地 HTML 文件来创建对象，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>))<br></code></pre></td></tr></table></figure><p>上面这句代码便是将本地 index.html 文件打开，用它来创建 soup 对象 下面我们来打印一下 soup 对象的内容，格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> soup.prettify()<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>   The Dormouse&#x27;s story<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dromouse&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><br>    The Dormouse&#x27;s story<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><br>   Once upon a time there were three little sisters; and their names were<br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/elsie&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Elsie --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   ,<br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/lacie&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link2&quot;</span>&gt;</span><br>    Lacie<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   and<br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/tillie&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link3&quot;</span>&gt;</span><br>    Tillie<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   ;<br>and they lived at the bottom of a well.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><br>   ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>在快速使用中我们添加如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.title)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(soup.title)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.head)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p)</span></span><br></code></pre></td></tr></table></figure><p>通过这种 soup.标签名 我们就可以获得这个标签的内容<br>这里有个问题需要注意，通过这种方式获取标签，如果文档中有多个这样的标签，返回的结果是第一个标签的内容，如上面我们通过 soup.p 获取 p 标签，而文档中有多个 p 标签，但是只返回了第一个 p 标签内容</p><h3 id="获取名称"><a href="#获取名称" class="headerlink" title="获取名称"></a>获取名称</h3><p>当我们通过 soup.title.name 的时候就可以获得该 title 标签的名称，即 title</p><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p.attrs[<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p[<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br></code></pre></td></tr></table></figure><p>上面两种方式都可以获取 p 标签的 name 属性值</p><h3 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p.string)</span></span><br></code></pre></td></tr></table></figure><p>结果就可以获取第一个 p 标签的内容：<br>The Dormouse’s story</p><h3 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><p>我们直接可以通过下面嵌套的方式获取</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">print</span>(soup.head.<span class="hljs-built_in">title</span>.<span class="hljs-built_in">string</span>)<br></code></pre></td></tr></table></figure><p>子节点和子孙节点<br>contents 的使用<br>通过下面例子演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">html = &quot;&quot;&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><br>            Once upon a time there were three little sisters; and their names were<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/elsie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Elsie<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/lacie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link2&quot;</span>&gt;</span>Lacie<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            and<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com/tillie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sister&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;link3&quot;</span>&gt;</span>Tillie<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            and they lived at the bottom of a well.<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&quot;&quot;&quot;<br><br>from bs4 import BeautifulSoup<br><br>soup = BeautifulSoup(html,&#x27;lxml&#x27;)<br>print(soup.p.contents)<br></code></pre></td></tr></table></figure><p>结果是将 p 标签下的所有子标签存入到了一个列表中</p><p>列表中会存入如下元素</p><h3 id="children-的使用"><a href="#children-的使用" class="headerlink" title="children 的使用"></a>children 的使用</h3><p>通过下面的方式也可以获取 p 标签下的所有子节点内容和通过 contents 获取的结果是一样的，但是不同的地方是 soup.p.children 是一个迭代对象，而不是列表，只能通过循环的方式获取素有的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(soup.p.children)<br><span class="hljs-keyword">for</span> i,child <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(soup.p.children):<br><span class="hljs-built_in">print</span>(i,child)<br></code></pre></td></tr></table></figure><p>通过 contents 以及 children 都是获取子节点，如果想要获取子孙节点可以通过 descendants<br>print(soup.descendants)同时这种获取的结果也是一个迭代器</p><h3 id="父节点和祖先节点"><a href="#父节点和祖先节点" class="headerlink" title="父节点和祖先节点"></a>父节点和祖先节点</h3><p>通过 soup.a.parent 就可以获取父节点的信息</p><p>通过 list(enumerate(soup.a.parents))可以获取祖先节点，这个方法返回的结果是一个列表，会分别将 a 标签的父节点的信息存放到列表中，以及父节点的父节点也放到列表中，并且最后还会讲整个文档放到列表中，所有列表的最后一个元素以及倒数第二个元素都是存的整个文档的信息</p><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><p>soup.a.next_siblings 获取后面的兄弟节点<br>soup.a.previous_siblings 获取前面的兄弟节点<br>soup.a.next_sibling 获取下一个兄弟标签<br>souo.a.previous_sinbling 获取上一个兄弟标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">get_text()<br></code></pre></td></tr></table></figure><p>如果只想得到 tag 中包含的文本内容,那么可以调用 get_text() 方法,这个方法获取到 tag 中包含的所有文版内容包括子孙 tag 中的内容,并将结果作为 Unicode 字符串返回</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">markup = <span class="hljs-string">&#x27;&lt;a href=&quot;http://example.com/&quot;&gt;\nI linked to &lt;i&gt;example.com&lt;/i&gt;\n&lt;/a&gt;&#x27;</span><br>soup = BeautifulSoup(markup)<br><br>soup.get_text()<br><span class="hljs-string">u&#x27;\nI linked to example.com\n&#x27;</span><br>soup.i.get_text()<br><span class="hljs-string">u&#x27;example.com&#x27;</span><br></code></pre></td></tr></table></figure><p>可以通过参数指定 tag 的文本内容的分隔符:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># soup.get_text(&quot;|&quot;)</span><br><span class="hljs-string">u&#x27;\nI linked to |example.com|\n&#x27;</span><br></code></pre></td></tr></table></figure><p>还可以去除获得文本内容的前后空白:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># soup.get_text(&quot;|&quot;, strip=True)</span><br><span class="hljs-string">u&#x27;I linked to|example.com&#x27;</span><br></code></pre></td></tr></table></figure><p>或者使用 .stripped_strings 生成器,获得文本列表后手动处理列表:</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">[<span class="hljs-literal">text</span> <span class="hljs-keyword">for</span> <span class="hljs-literal">text</span> <span class="hljs-keyword">in</span> soup.stripped_strings]<br># [u<span class="hljs-symbol">&#x27;I</span> linked <span class="hljs-keyword">to</span>&#x27;, u<span class="hljs-symbol">&#x27;example</span>.com&#x27;]<br></code></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title=".string"></a>.string</h3><p>如果 tag 只有一个 NavigableString 类型子节点,那么这个 tag 可以使用 .string 得到子节点:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sml">title_tag.<span class="hljs-built_in">string</span><br># u&#x27;The <span class="hljs-type">Dormouse&#x27;s</span> story&#x27;<br></code></pre></td></tr></table></figure><p>如果一个 tag 仅有一个子节点,那么这个 tag 也可以使用 .string 方法,输出结果与当前唯一子节点的 .string 结果相同:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">head_tag.contents<br># [&lt;title&gt;The Dormous<span class="hljs-string">e&#x27;s story&lt;/title&gt;]</span><br><span class="hljs-string">head_tag.string</span><br><span class="hljs-string"># u&#x27;</span>The Dormous<span class="hljs-string">e&#x27;s story&#x27;</span><br></code></pre></td></tr></table></figure><p>如果 tag 包含了多个子节点,tag 就无法确定 .string 方法应该调用哪个子节点的内容, .string 的输出结果是 None :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(soup.html.<span class="hljs-keyword">string</span>)<br><span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REDIS常用命令</title>
    <link href="/blog/1193209778.html"/>
    <url>/blog/1193209778.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、redis-启动"><a href="#一、redis-启动" class="headerlink" title="一、redis 启动"></a>一、redis 启动</h1><p>本地启动：<code>redis-cli</code></p><p>远程启动：<code>redis-cli -h host -p port -a password</code></p><p>Redis 连接命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">AUTH password<br></code></pre></td></tr></table></figure><p>验证密码是否正确</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ECHO</span> message<br></code></pre></td></tr></table></figure><p>打印字符串</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">PING</span><br></code></pre></td></tr></table></figure><p>查看服务是否运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">QUIT<br></code></pre></td></tr></table></figure><p>关闭当前连接</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SELECT index<br></code></pre></td></tr></table></figure><p>切换到指定的数据库</p><h1 id="二、redis-keys-命令"><a href="#二、redis-keys-命令" class="headerlink" title="二、redis keys 命令"></a>二、redis keys 命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">DEL</span> key<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DUMP key<br></code></pre></td></tr></table></figure><p>序列化给定的 key 并返回序列化的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXISTS key<br></code></pre></td></tr></table></figure><p>检查给定的 key 是否存在</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXPIRE key seconds<br></code></pre></td></tr></table></figure><p>为 key 设置过期时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXPIRE key timestamp<br></code></pre></td></tr></table></figure><p>用时间戳的方式给 key 设置过期时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PEXPIRE key milliseconds<br></code></pre></td></tr></table></figure><p>设置 key 的过期时间以毫秒计</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">KEYS pattern<br></code></pre></td></tr></table></figure><p>查找所有符合给定模式的 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">MOVE</span> key db<br></code></pre></td></tr></table></figure><p>将当前数据库的 key 移动到数据库 db 当中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PERSIST key<br></code></pre></td></tr></table></figure><p>移除 key 的过期时间，key 将持久保存</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PTTL key<br></code></pre></td></tr></table></figure><p>以毫秒为单位返回 key 的剩余过期时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">TTL key<br></code></pre></td></tr></table></figure><p>以秒为单位，返回给定 key 的剩余生存时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RANDOMKEY<br></code></pre></td></tr></table></figure><p>从当前数据库中随机返回一个 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">RENAME</span> key newkey<br></code></pre></td></tr></table></figure><p>修改 key 的名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RENAMENX key newkey<br></code></pre></td></tr></table></figure><p>仅当 newkey 不存在时，将 key 改名为 newkey</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">TYPE</span> key<br></code></pre></td></tr></table></figure><p>返回 key 所存储的值的类型</p><h1 id="三、reids-字符串命令"><a href="#三、reids-字符串命令" class="headerlink" title="三、reids 字符串命令"></a>三、reids 字符串命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">SET</span> key value<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">GET key<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">GETRANGE key <span class="hljs-built_in">start</span> end<br></code></pre></td></tr></table></figure><p>返回 key 中字符串值的子字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs `cmd">GETSET key value<br></code></pre></td></tr></table></figure><p>将给定 key 的值设为 value，并返回 key 的旧值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">GETBIT KEY OFFSET<br></code></pre></td></tr></table></figure><p>对 key 所储存的字符串值，获取指定偏移量上的位</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MGET KEY1 KEY2<br></code></pre></td></tr></table></figure><p>获取一个或者多个给定 key 的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETBIT KEY OFFSET VALUE<br></code></pre></td></tr></table></figure><p>对 key 所是存储的字符串值，设置或清除指定偏移量上的位</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETEX key seconds value<br></code></pre></td></tr></table></figure><p>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETNX key value<br></code></pre></td></tr></table></figure><p>只有在 key 不存在时设置 key 的值。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SETRANGE key offset value<br></code></pre></td></tr></table></figure><p>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">STRLEN key<br></code></pre></td></tr></table></figure><p>返回 key 所储存的字符串值的长度。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MSET key value [key value ...]<br></code></pre></td></tr></table></figure><p>同时设置一个或多个 key-value 对。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MSETNX key value [key value ...]<br></code></pre></td></tr></table></figure><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PSETEX key milliseconds value<br></code></pre></td></tr></table></figure><p>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INCR key<br></code></pre></td></tr></table></figure><p>将 key 中储存的数字值增一。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INCRBY key increment<br></code></pre></td></tr></table></figure><p>将 key 所储存的值加上给定的增量值（increment）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INCRBYFLOAT key increment<br></code></pre></td></tr></table></figure><p>将 key 所储存的值加上给定的浮点增量值（increment）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DECR key<br></code></pre></td></tr></table></figure><p>将 key 中储存的数字值减一</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DECRBY key decrement<br></code></pre></td></tr></table></figure><p>key 所储存的值减去给定的减量值（decrement）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">APPEND</span> key value<br></code></pre></td></tr></table></figure><p>如果 key 已经存在并且是一个字符串， APPEND 命令将 指定 value 追加到改 key 原来的值（value）的末尾。</p><h1 id="四、Redis-hash-命令"><a href="#四、Redis-hash-命令" class="headerlink" title="四、Redis hash 命令"></a>四、Redis hash 命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HDEL key field1 [field2]<br></code></pre></td></tr></table></figure><p>删除一个或多个哈希表字段</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HEXISTS key field<br></code></pre></td></tr></table></figure><p>查看哈希表 key 中，指定的字段是否存在。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HGET key field<br></code></pre></td></tr></table></figure><p>获取存储在哈希表中指定字段的值。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HGETALL key<br></code></pre></td></tr></table></figure><p>获取在哈希表中指定 key 的所有字段和值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HINCRBY key field increment<br></code></pre></td></tr></table></figure><p>为哈希表 key 中的指定字段的整数值加上增量 increment 。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HINCRBYFLOAT key field increment<br></code></pre></td></tr></table></figure><p>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HKEYS key<br></code></pre></td></tr></table></figure><p>获取所有哈希表中的字段</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HLEN key<br></code></pre></td></tr></table></figure><p>获取哈希表中字段的数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HMGET key field1 [field2]<br></code></pre></td></tr></table></figure><p>获取所有给定字段的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HMSET key field1 value1 [field2 value2 ]<br></code></pre></td></tr></table></figure><p>同时将多个 field-value (域-值)对设置到哈希表 key 中。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HSET key field value<br></code></pre></td></tr></table></figure><p>将哈希表 key 中的字段 field 的值设为 value 。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HSETNX key field value<br></code></pre></td></tr></table></figure><p>只有在字段 field 不存在时，设置哈希表字段的值。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HVALS key<br></code></pre></td></tr></table></figure><p>获取哈希表中所有值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HSCAN key cursor [MATCH pattern] [COUNT count]<br></code></pre></td></tr></table></figure><p>迭代哈希表中的键值对。</p><h1 id="五、Redis-列表命令"><a href="#五、Redis-列表命令" class="headerlink" title="五、Redis 列表命令"></a>五、Redis 列表命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BLPOP key1 [key2 ] timeout<br></code></pre></td></tr></table></figure><p>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BRPOP key1 [key2 ] timeout<br></code></pre></td></tr></table></figure><p>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BRPOPLPUSH source destination timeout<br></code></pre></td></tr></table></figure><p>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LINDEX key index<br></code></pre></td></tr></table></figure><p>通过索引获取列表中的元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LINSERT key BEFORE|AFTER pivot value<br></code></pre></td></tr></table></figure><p>在列表的元素前或者后插入元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LLEN key<br></code></pre></td></tr></table></figure><p>获取列表长度</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LPOP key<br></code></pre></td></tr></table></figure><p>移出并获取列表的第一个元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LPUSH key value1 [value2]<br></code></pre></td></tr></table></figure><p>将一个或多个值插入到列表头部</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LPUSHX key value<br></code></pre></td></tr></table></figure><p>将一个值插入到已存在的列表头部</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LRANGE key <span class="hljs-built_in">start</span> stop<br></code></pre></td></tr></table></figure><p>获取列表指定范围内的元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LREM key count value<br></code></pre></td></tr></table></figure><p>移除列表元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LSET key index value<br></code></pre></td></tr></table></figure><p>通过索引设置列表元素的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LTRIM key <span class="hljs-built_in">start</span> stop<br></code></pre></td></tr></table></figure><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPOP key<br></code></pre></td></tr></table></figure><p>移除并获取列表最后一个元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPOPLPUSH source destination<br></code></pre></td></tr></table></figure><p>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPUSH key value1 [value2]<br></code></pre></td></tr></table></figure><p>在列表中添加一个或多个值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">RPUSHX key value<br></code></pre></td></tr></table></figure><p>为已存在的列表添加值</p><h1 id="六、Redis-集合命令"><a href="#六、Redis-集合命令" class="headerlink" title="六、Redis 集合命令"></a>六、Redis 集合命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SADD key member1 [member2]<br></code></pre></td></tr></table></figure><p>向集合添加一个或多个成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCARD key<br></code></pre></td></tr></table></figure><p>获取集合的成员数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SDIFF key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的差集</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SDIFFSTORE destination key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的差集并存储在 destination 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SINTER key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的交集</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SINTERSTORE destination key1 [key2]<br></code></pre></td></tr></table></figure><p>返回给定所有集合的交集并存储在 destination 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SISMEMBER key member<br></code></pre></td></tr></table></figure><p>判断 member 元素是否是集合 key 的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SMEMBERS key<br></code></pre></td></tr></table></figure><p>返回集合中的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SMOVE source destination member<br></code></pre></td></tr></table></figure><p>将 member 元素从 source 集合移动到 destination 集合</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SPOP key<br></code></pre></td></tr></table></figure><p>移除并返回集合中的一个随机元素</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SRANDMEMBER key [count]<br></code></pre></td></tr></table></figure><p>返回集合中一个或多个随机数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SREM key member1 [member2]<br></code></pre></td></tr></table></figure><p>移除集合中一个或多个成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SUNION key1 [key2]<br></code></pre></td></tr></table></figure><p>返回所有给定集合的并集</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SUNIONSTORE destination key1 [key2]<br></code></pre></td></tr></table></figure><p>所有给定集合的并集存储在 destination 集合中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SSCAN key cursor [MATCH pattern] [COUNT count]<br></code></pre></td></tr></table></figure><p>迭代集合中的元素</p><h1 id="七、Redis-有序集合命令"><a href="#七、Redis-有序集合命令" class="headerlink" title="七、Redis 有序集合命令"></a>七、Redis 有序集合命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZADD key score1 member1 [score2 member2]<br></code></pre></td></tr></table></figure><p>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZCARD key<br></code></pre></td></tr></table></figure><p>获取有序集合的成员数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZCOUNT key min max<br></code></pre></td></tr></table></figure><p>计算在有序集合中指定区间分数的成员数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZINCRBY key increment member<br></code></pre></td></tr></table></figure><p>有序集合中对指定成员的分数加上增量 increment</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZINTERSTORE destination numkeys key [key ...]<br></code></pre></td></tr></table></figure><p>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZLEXCOUNT key min max<br></code></pre></td></tr></table></figure><p>在有序集合中计算指定字典区间内成员数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANGE key <span class="hljs-built_in">start</span> stop [WITHSCORES]<br></code></pre></td></tr></table></figure><p>通过索引区间返回有序集合成指定区间内的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANGEBYLEX key min max [LIMIT offset count]<br></code></pre></td></tr></table></figure><p>通过字典区间返回有序集合的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]<br></code></pre></td></tr></table></figure><p>通过分数返回有序集合指定区间内的成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZRANK key member<br></code></pre></td></tr></table></figure><p>返回有序集合中指定成员的索引</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREM key member [member ...]<br></code></pre></td></tr></table></figure><p>移除有序集合中的一个或多个成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREMRANGEBYLEX key min max<br></code></pre></td></tr></table></figure><p>移除有序集合中给定的字典区间的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREMRANGEBYRANK key <span class="hljs-built_in">start</span> stop<br></code></pre></td></tr></table></figure><p>移除有序集合中给定的排名区间的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREMRANGEBYSCORE key min max<br></code></pre></td></tr></table></figure><p>移除有序集合中给定的分数区间的所有成员</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREVRANGE key <span class="hljs-built_in">start</span> stop [WITHSCORES]<br></code></pre></td></tr></table></figure><p>返回有序集中指定区间内的成员，通过索引，分数从高到底</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREVRANGEBYSCORE key max min [WITHSCORES]<br></code></pre></td></tr></table></figure><p>返回有序集中指定分数区间内的成员，分数从高到低排序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZREVRANK key member<br></code></pre></td></tr></table></figure><p>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZSCORE key member<br></code></pre></td></tr></table></figure><p>返回有序集中，成员的分数值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZUNIONSTORE destination numkeys key [key ...]<br></code></pre></td></tr></table></figure><p>计算给定的一个或多个有序集的并集，并存储在新的 key 中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ZSCAN key cursor [MATCH pattern] [COUNT count]<br></code></pre></td></tr></table></figure><p>迭代有序集合中的元素（包括元素成员和元素分值）</p><h1 id="八、Redis-事务命令"><a href="#八、Redis-事务命令" class="headerlink" title="八、Redis 事务命令"></a>八、Redis 事务命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISCARD<br></code></pre></td></tr></table></figure><p>取消事务，放弃执行事务块内的所有命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EXEC<br></code></pre></td></tr></table></figure><p>执行所有事务块内的命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MULTI<br></code></pre></td></tr></table></figure><p>标记一个事务块的开始。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">UNWATCH<br></code></pre></td></tr></table></figure><p>取消 WATCH 命令对所有 key 的监视。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">WATCH key [key ...]<br></code></pre></td></tr></table></figure><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><h1 id="九、Redis-脚本命令"><a href="#九、Redis-脚本命令" class="headerlink" title="九、Redis 脚本命令"></a>九、Redis 脚本命令</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EVAL script numkeys key [key ...] arg [arg ...]<br></code></pre></td></tr></table></figure><p>执行 Lua 脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">EVALSHA sha1 numkeys key [key ...] arg [arg ...]<br></code></pre></td></tr></table></figure><p>执行 Lua 脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT EXISTS script [script ...]<br></code></pre></td></tr></table></figure><p>查看指定的脚本是否已经被保存在缓存当中。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT FLUSH<br></code></pre></td></tr></table></figure><p>从脚本缓存中移除所有脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT KILL<br></code></pre></td></tr></table></figure><p>杀死当前正在运行的 Lua 脚本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SCRIPT LOAD script<br></code></pre></td></tr></table></figure><p>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</p><p>十、Redis 服务器命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BGREWRITEAOF<br></code></pre></td></tr></table></figure><p>异步执行一个 AOF（AppendOnly File） 文件重写操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">BGSAVE<br></code></pre></td></tr></table></figure><p>在后台异步保存当前数据库的数据到磁盘</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT KILL [ip:port] [ID client-id]<br></code></pre></td></tr></table></figure><p>关闭客户端连接</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT LIST<br></code></pre></td></tr></table></figure><p>获取连接到服务器的客户端连接列表</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT GETNAME<br></code></pre></td></tr></table></figure><p>获取连接的名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT <span class="hljs-built_in">PAUSE</span> timeout<br></code></pre></td></tr></table></figure><p>在指定时间内终止运行来自客户端的命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLIENT SETNAME connection-name<br></code></pre></td></tr></table></figure><p>设置当前连接的名称</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CLUSTER SLOTS<br></code></pre></td></tr></table></figure><p>获取集群节点的映射数组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND<br></code></pre></td></tr></table></figure><p>获取 Redis 命令详情数组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND COUNT<br></code></pre></td></tr></table></figure><p>获取 Redis 命令总数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND GETKEYS<br></code></pre></td></tr></table></figure><p>获取给定命令的所有键</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">TIME</span><br></code></pre></td></tr></table></figure><p>返回当前服务器时间</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">COMMAND INFO command-name [command-name ...]<br></code></pre></td></tr></table></figure><p>获取指定 Redis 命令描述的数组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG GET parameter<br></code></pre></td></tr></table></figure><p>获取指定配置参数的值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG REWRITE<br></code></pre></td></tr></table></figure><p>对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG <span class="hljs-built_in">SET</span> parameter value<br></code></pre></td></tr></table></figure><p>修改 redis 配置参数，无需重启</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">CONFIG RESETSTAT<br></code></pre></td></tr></table></figure><p>重置 INFO 命令中的某些统计数据</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DBSIZE<br></code></pre></td></tr></table></figure><p>返回当前数据库的 key 的数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DEBUG OBJECT key<br></code></pre></td></tr></table></figure><p>获取 key 的调试信息</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DEBUG SEGFAULT<br></code></pre></td></tr></table></figure><p>让 Redis 服务崩溃</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">FLUSHALL<br></code></pre></td></tr></table></figure><p>删除所有数据库的所有 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">FLUSHDB<br></code></pre></td></tr></table></figure><p>删除当前数据库的所有 key</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">INFO [section]<br></code></pre></td></tr></table></figure><p>获取 Redis 服务器的各种信息和统计数值</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">LASTSAVE<br></code></pre></td></tr></table></figure><p>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">MONITOR<br></code></pre></td></tr></table></figure><p>实时打印出 Redis 服务器接收到的命令，调试用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ROLE<br></code></pre></td></tr></table></figure><p>返回主从实例所属的角色</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SAVE<br></code></pre></td></tr></table></figure><p>同步保存数据到硬盘</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SHUTDOWN [NOSAVE] [SAVE]<br></code></pre></td></tr></table></figure><p>异步保存数据到硬盘，并关闭服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SLAVEOF host port<br></code></pre></td></tr></table></figure><p>将当前服务器转变为指定服务器的从属服务器(slave server)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SLOWLOG subcommand [argument]<br></code></pre></td></tr></table></figure><p>管理 redis 的慢日志</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">SYNC<br></code></pre></td></tr></table></figure><p>用于复制功能(replication)的内部命令</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
